# Generated by Django 5.0.8 on 2025-02-28 07:27

import datetime
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('stakeholder', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BatchPerformanceBenchmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('performance_level', models.CharField(choices=[('EXCELLENT', 'Excellent'), ('GOOD', 'Good'), ('AVERAGE', 'Average'), ('POOR', 'Poor'), ('CRITICAL', 'Critical')], max_length=20)),
                ('min_weight', models.FloatField()),
                ('max_weight', models.FloatField()),
                ('min_fcr', models.FloatField()),
                ('max_fcr', models.FloatField()),
                ('min_temperature', models.FloatField()),
                ('max_temperature', models.FloatField()),
                ('min_humidity', models.FloatField()),
                ('max_humidity', models.FloatField()),
                ('min_feed_intake', models.FloatField()),
                ('max_feed_intake', models.FloatField()),
                ('min_water_consumption', models.FloatField()),
                ('max_water_consumption', models.FloatField()),
                ('max_mortality_rate', models.FloatField()),
            ],
            options={
                'ordering': ['performance_level'],
            },
        ),
        migrations.CreateModel(
            name='DailyTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('category', models.CharField(choices=[('GENERAL', 'General'), ('COMPOSTING', 'Composting'), ('RECYCLING', 'Recycling'), ('WATER', 'Water Conservation')], max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='FeedStock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feed_type', models.CharField(choices=[('starter', 'Starter Feed (0-21 days)'), ('grower', 'Grower Feed (22-35 days)'), ('finisher', 'Finisher Feed (36+ days)')], max_length=20)),
                ('number_of_sacks', models.PositiveIntegerField(help_text='Number of 50kg sacks available')),
                ('price_per_sack', models.DecimalField(decimal_places=2, default=1750.0, help_text='Price for one 50kg sack', max_digits=8)),
                ('minimum_sacks', models.PositiveIntegerField(default=20, help_text='Minimum number of sacks to maintain')),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supplier_code', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('phone_number', models.CharField(max_length=15)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='VaccinationRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dose_number', models.PositiveIntegerField()),
                ('scheduled_date', models.DateField()),
                ('administered_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed')], default='pending', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Vaccine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('manufacturer', models.CharField(max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('vaccination_day', models.IntegerField(choices=[(7, '7th Day'), (14, '14th Day'), (21, '21st Day')], help_text='Day of vaccination administration')),
                ('doses_required', models.PositiveIntegerField(default=1)),
                ('interval_days', models.PositiveIntegerField()),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('current_stock', models.PositiveIntegerField(default=0, help_text='Current available stock')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('stock_status', models.CharField(choices=[('IN_STOCK', 'In Stock'), ('LOW_STOCK', 'Low Stock'), ('OUT_OF_STOCK', 'Out of Stock')], default='OUT_OF_STOCK', max_length=20)),
                ('minimum_stock_level', models.PositiveIntegerField(default=100, help_text='Minimum stock level before warning')),
                ('batch_number', models.CharField(blank=True, help_text='Vaccine batch number', max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='WasteManagementResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('resource_type', models.CharField(choices=[('GUIDE', 'Guide'), ('VIDEO', 'Video'), ('ARTICLE', 'Article'), ('INFOGRAPHIC', 'Infographic')], max_length=50)),
                ('file', models.FileField(upload_to='waste_resources/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'mp4', 'jpg', 'png'])])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('full_name', models.CharField(max_length=255)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ChatRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('farm_name', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('stakeholder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_rooms', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='user.chatroom')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contract_number', models.CharField(default=uuid.uuid4, max_length=50, unique=True)),
                ('start_date', models.DateField(default=django.utils.timezone.now)),
                ('end_date', models.DateField(default=datetime.datetime(2026, 2, 28, 7, 27, 12, 400548, tzinfo=datetime.timezone.utc))),
                ('contract_type', models.CharField(choices=[('Standard', 'Standard Contract'), ('Premium', 'Premium Contract'), ('Special', 'Special Agreement')], default='Standard', max_length=50)),
                ('contract_terms', models.JSONField(default=dict)),
                ('additional_notes', models.TextField(blank=True)),
                ('admin_signature', models.TextField(blank=True)),
                ('admin_signed_date', models.DateTimeField(blank=True, null=True)),
                ('stakeholder_signature', models.TextField(blank=True)),
                ('stakeholder_signed_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('Pending_Admin', 'Pending Admin Signature'), ('Pending_Stakeholder', 'Pending Stakeholder Signature'), ('Active', 'Active'), ('Expired', 'Expired'), ('Terminated', 'Terminated')], default='Draft', max_length=20)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_contracts', to=settings.AUTH_USER_MODEL)),
                ('stakeholder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stakeholder_contracts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='supplier',
            constraint=models.UniqueConstraint(fields=('supplier_code',), name='unique_supplier_code'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='user.usertype'),
        ),
        migrations.AddField(
            model_name='vaccinationrecord',
            name='batch',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stakeholder.chickbatch'),
        ),
        migrations.AddField(
            model_name='vaccinationrecord',
            name='vaccine',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user.vaccine'),
        ),
    ]
