[
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "logout_view",
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "isExtraImport": true,
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "ChickBatch",
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "isExtraImport": true,
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "ChickBatch",
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "isExtraImport": true,
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "Farm",
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "isExtraImport": true,
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "ChickBatch",
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "isExtraImport": true,
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "DailyData",
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "isExtraImport": true,
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "Farm",
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "isExtraImport": true,
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "ChickBatch",
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "isExtraImport": true,
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "ChickBatch",
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "isExtraImport": true,
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "DailyData",
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "isExtraImport": true,
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "Farm",
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "isExtraImport": true,
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "ChickBatch",
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "isExtraImport": true,
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "VaccinationSchedule",
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "isExtraImport": true,
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "user.models",
        "description": "user.models",
        "isExtraImport": true,
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "user.models",
        "description": "user.models",
        "isExtraImport": true,
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "user.models",
        "description": "user.models",
        "isExtraImport": true,
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "Supplier",
        "importPath": "user.models",
        "description": "user.models",
        "isExtraImport": true,
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "Supplier",
        "importPath": "user.models",
        "description": "user.models",
        "isExtraImport": true,
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "user.models",
        "description": "user.models",
        "isExtraImport": true,
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "Vaccine",
        "importPath": "user.models",
        "description": "user.models",
        "isExtraImport": true,
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "user.models",
        "description": "user.models",
        "isExtraImport": true,
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "user.models",
        "description": "user.models",
        "isExtraImport": true,
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "Vaccine",
        "importPath": "user.models",
        "description": "user.models",
        "isExtraImport": true,
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "radians",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "atan2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "radians",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "asin",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "FloatField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Cast",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "strip_tags",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "hoteldetails.models",
        "description": "hoteldetails.models",
        "isExtraImport": true,
        "detail": "hoteldetails.models",
        "documentation": {}
    },
    {
        "label": "Cart",
        "importPath": "hoteldetails.models",
        "description": "hoteldetails.models",
        "isExtraImport": true,
        "detail": "hoteldetails.models",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "importPath": "hoteldetails.models",
        "description": "hoteldetails.models",
        "isExtraImport": true,
        "detail": "hoteldetails.models",
        "documentation": {}
    },
    {
        "label": "HotelUser",
        "importPath": "hoteldetails.models",
        "description": "hoteldetails.models",
        "isExtraImport": true,
        "detail": "hoteldetails.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "hoteldetails.models",
        "description": "hoteldetails.models",
        "isExtraImport": true,
        "detail": "hoteldetails.models",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "twilio.rest",
        "description": "twilio.rest",
        "isExtraImport": true,
        "detail": "twilio.rest",
        "documentation": {}
    },
    {
        "label": "approve_order",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "download_daily_log",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "register",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "CustomLoginView",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "admindash",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "stakeholderuser",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "customeruser",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "stakeholderuserprofile",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "customeruserprofile",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "vaccine_admin",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "feed_admin",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "renew_pollution_certificate",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "supplier_list",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "add_supplier",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "enable_supplier",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "disable_supplier",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "edit_supplier",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "toggle_user_status",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "view_stakeholder_view",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "manage_vaccines",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "add_vaccine",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "edit_vaccine",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "manage_records",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "add_record",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "vaccine_dashboard",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "delete_vaccine",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "assign_vaccine",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "get_active_batches",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "add_resource",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "add_tip",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "waste_management_admin",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "view_resources",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "view_tips",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "#     update_location",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "OWM",
        "importPath": "pyowm",
        "description": "pyowm",
        "isExtraImport": true,
        "detail": "pyowm",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "FileExtensionValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ModelBackend",
        "importPath": "django.contrib.auth.backends",
        "description": "django.contrib.auth.backends",
        "isExtraImport": true,
        "detail": "django.contrib.auth.backends",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "SetPasswordForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "shared_task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "PeriodicTask",
        "importPath": "django_celery_beat.models",
        "description": "django_celery_beat.models",
        "isExtraImport": true,
        "detail": "django_celery_beat.models",
        "documentation": {}
    },
    {
        "label": "CrontabSchedule",
        "importPath": "django_celery_beat.models",
        "description": "django_celery_beat.models",
        "isExtraImport": true,
        "detail": "django_celery_beat.models",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "manage_feed_requests",
        "kind": 2,
        "importPath": "admin.views",
        "description": "admin.views",
        "peekOfCode": "def manage_feed_requests(request):\n    feed_requests = FeedRequest.objects.all().order_by('-requested_date')\n    suppliers = Supplier.objects.filter(is_active=True)\n    return render(request, 'admin/manage_feed_requests.html', {\n        'feed_requests': feed_requests,\n        'suppliers': suppliers\n    })\ndef assign_supplier(request, request_id):\n    if request.method == 'POST':\n        feed_request = FeedRequest.objects.get(id=request_id)",
        "detail": "admin.views",
        "documentation": {}
    },
    {
        "label": "assign_supplier",
        "kind": 2,
        "importPath": "admin.views",
        "description": "admin.views",
        "peekOfCode": "def assign_supplier(request, request_id):\n    if request.method == 'POST':\n        feed_request = FeedRequest.objects.get(id=request_id)\n        supplier_id = request.POST.get('supplier')\n        price_per_unit = request.POST.get('price_per_unit')\n        feed_request.assigned_supplier_id = supplier_id\n        feed_request.price_per_unit = price_per_unit\n        feed_request.status = 'assigned'\n        feed_request.assigned_date = timezone.now()\n        feed_request.save()",
        "detail": "admin.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.asgi",
        "description": "FeatherFarmSoloutions.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "FeatherFarmSoloutions.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \"django-insecure-any&$e=8_%j$4u1aw@%b_uo!+0x(88%aj0h!1&m4pqic(cjv(l\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "SECRET_KEY = \"django-insecure-any&$e=8_%j$4u1aw@%b_uo!+0x(88%aj0h!1&m4pqic(cjv(l\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "ALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"django.contrib.sites\",",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"django.contrib.sites\",\n    \"stakeholder.apps.StakeholderConfig\",\n    \"user\",",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = \"bootstrap5\"\nMIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"allauth.account.middleware.AccountMiddleware\",",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"allauth.account.middleware.AccountMiddleware\",\n    \"django_otp.middleware.OTPMiddleware\",",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "ROOT_URLCONF = \"FeatherFarmSoloutions.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [\"templates\"],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [\"templates\"],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "WSGI_APPLICATION = \"FeatherFarmSoloutions.wsgi.application\"\n# dpg-csl5vh56l47c73e6h07g-a\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\n# DATABASES = {\n#     'default': {\n#         'ENGINE': 'django.db.backends.mysql',\n#         'NAME': 'featherfarm',\n#         'USER': 'root',\n#         'PASSWORD': '',",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",  # Database engine\n        \"NAME\": BASE_DIR / \"db.sqlite3\",  # Path to database file\n    }\n}\n# DATABASES = {\n#     'default': {\n#         'ENGINE': 'django.db.backends.mysql',\n#         'NAME': 'featherfarm_db',",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "SECURE_REFERRER_POLICY",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "SECURE_REFERRER_POLICY = \"strict-origin-when-cross-origin\"\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"Asia/Kolkata\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")\nSTATICFILES_DIRS = [BASE_DIR / \"static\"]\n# Default primary key field type",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "TIME_ZONE = \"Asia/Kolkata\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")\nSTATICFILES_DIRS = [BASE_DIR / \"static\"]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")\nSTATICFILES_DIRS = [BASE_DIR / \"static\"]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nMEDIA_URL = \"/media/\"",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")\nSTATICFILES_DIRS = [BASE_DIR / \"static\"]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media/\")",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")\nSTATICFILES_DIRS = [BASE_DIR / \"static\"]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media/\")\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = \"smtp.gmail.com\"",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")\nSTATICFILES_DIRS = [BASE_DIR / \"static\"]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media/\")\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_PORT = 587",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "STATICFILES_DIRS = [BASE_DIR / \"static\"]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media/\")\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "MEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media/\")\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = \"nimyathomas3@gmail.com\"\nEMAIL_HOST_PASSWORD = \"isfa lred wfxt ujws\"\nAUTHENTICATION_BACKENDS = (",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, \"media/\")\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = \"nimyathomas3@gmail.com\"\nEMAIL_HOST_PASSWORD = \"isfa lred wfxt ujws\"\nAUTHENTICATION_BACKENDS = (\n    \"django.contrib.auth.backends.ModelBackend\",",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = \"nimyathomas3@gmail.com\"\nEMAIL_HOST_PASSWORD = \"isfa lred wfxt ujws\"\nAUTHENTICATION_BACKENDS = (\n    \"django.contrib.auth.backends.ModelBackend\",\n    \"user.backends.EmailBackend\",",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "EMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = \"nimyathomas3@gmail.com\"\nEMAIL_HOST_PASSWORD = \"isfa lred wfxt ujws\"\nAUTHENTICATION_BACKENDS = (\n    \"django.contrib.auth.backends.ModelBackend\",\n    \"user.backends.EmailBackend\",\n    \"allauth.account.auth_backends.AuthenticationBackend\",",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "EMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = \"nimyathomas3@gmail.com\"\nEMAIL_HOST_PASSWORD = \"isfa lred wfxt ujws\"\nAUTHENTICATION_BACKENDS = (\n    \"django.contrib.auth.backends.ModelBackend\",\n    \"user.backends.EmailBackend\",\n    \"allauth.account.auth_backends.AuthenticationBackend\",\n    # 'django_otp.backends.OTPBackend',  # First layer: OTP validation",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "EMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = \"nimyathomas3@gmail.com\"\nEMAIL_HOST_PASSWORD = \"isfa lred wfxt ujws\"\nAUTHENTICATION_BACKENDS = (\n    \"django.contrib.auth.backends.ModelBackend\",\n    \"user.backends.EmailBackend\",\n    \"allauth.account.auth_backends.AuthenticationBackend\",\n    # 'django_otp.backends.OTPBackend',  # First layer: OTP validation\n)",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST_USER = \"nimyathomas3@gmail.com\"\nEMAIL_HOST_PASSWORD = \"isfa lred wfxt ujws\"\nAUTHENTICATION_BACKENDS = (\n    \"django.contrib.auth.backends.ModelBackend\",\n    \"user.backends.EmailBackend\",\n    \"allauth.account.auth_backends.AuthenticationBackend\",\n    # 'django_otp.backends.OTPBackend',  # First layer: OTP validation\n)\nACCOUNT_AUTHENTICATION_METHOD = \"email\"",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "EMAIL_HOST_USER = \"nimyathomas3@gmail.com\"\nEMAIL_HOST_PASSWORD = \"isfa lred wfxt ujws\"\nAUTHENTICATION_BACKENDS = (\n    \"django.contrib.auth.backends.ModelBackend\",\n    \"user.backends.EmailBackend\",\n    \"allauth.account.auth_backends.AuthenticationBackend\",\n    # 'django_otp.backends.OTPBackend',  # First layer: OTP validation\n)\nACCOUNT_AUTHENTICATION_METHOD = \"email\"\nACCOUNT_EMAIL_REQUIRED = True",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = \"isfa lred wfxt ujws\"\nAUTHENTICATION_BACKENDS = (\n    \"django.contrib.auth.backends.ModelBackend\",\n    \"user.backends.EmailBackend\",\n    \"allauth.account.auth_backends.AuthenticationBackend\",\n    # 'django_otp.backends.OTPBackend',  # First layer: OTP validation\n)\nACCOUNT_AUTHENTICATION_METHOD = \"email\"\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = (\n    \"django.contrib.auth.backends.ModelBackend\",\n    \"user.backends.EmailBackend\",\n    \"allauth.account.auth_backends.AuthenticationBackend\",\n    # 'django_otp.backends.OTPBackend',  # First layer: OTP validation\n)\nACCOUNT_AUTHENTICATION_METHOD = \"email\"\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False\nACCOUNT_USER_MODEL_USERNAME_FIELD = None",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_AUTHENTICATION_METHOD",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "ACCOUNT_AUTHENTICATION_METHOD = \"email\"\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False\nACCOUNT_USER_MODEL_USERNAME_FIELD = None\nACCOUNT_EMAIL_VERIFICATION = \"optional\"\nACCOUNT_UNIQUE_EMAIL = True\nCLIENT_ID = \"993464726518-dlvqdjptpid7jmdsubuivfhe36ncc0at.apps.googleusercontent.com\"\npart1 = \"GOCSPX\"\npart2 = \"ahmTIfCelacuDxLKeiZ5JiX\"\npart3 = \"Y1rx\"",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_REQUIRED",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "ACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False\nACCOUNT_USER_MODEL_USERNAME_FIELD = None\nACCOUNT_EMAIL_VERIFICATION = \"optional\"\nACCOUNT_UNIQUE_EMAIL = True\nCLIENT_ID = \"993464726518-dlvqdjptpid7jmdsubuivfhe36ncc0at.apps.googleusercontent.com\"\npart1 = \"GOCSPX\"\npart2 = \"ahmTIfCelacuDxLKeiZ5JiX\"\npart3 = \"Y1rx\"\nmy_string = f\"{part1}-{part2}-{part3}\"",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_USERNAME_REQUIRED",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "ACCOUNT_USERNAME_REQUIRED = False\nACCOUNT_USER_MODEL_USERNAME_FIELD = None\nACCOUNT_EMAIL_VERIFICATION = \"optional\"\nACCOUNT_UNIQUE_EMAIL = True\nCLIENT_ID = \"993464726518-dlvqdjptpid7jmdsubuivfhe36ncc0at.apps.googleusercontent.com\"\npart1 = \"GOCSPX\"\npart2 = \"ahmTIfCelacuDxLKeiZ5JiX\"\npart3 = \"Y1rx\"\nmy_string = f\"{part1}-{part2}-{part3}\"\nSOCIALACCOUNT_PROVIDERS = {",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_USER_MODEL_USERNAME_FIELD",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "ACCOUNT_USER_MODEL_USERNAME_FIELD = None\nACCOUNT_EMAIL_VERIFICATION = \"optional\"\nACCOUNT_UNIQUE_EMAIL = True\nCLIENT_ID = \"993464726518-dlvqdjptpid7jmdsubuivfhe36ncc0at.apps.googleusercontent.com\"\npart1 = \"GOCSPX\"\npart2 = \"ahmTIfCelacuDxLKeiZ5JiX\"\npart3 = \"Y1rx\"\nmy_string = f\"{part1}-{part2}-{part3}\"\nSOCIALACCOUNT_PROVIDERS = {\n    \"google\": {",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_VERIFICATION",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "ACCOUNT_EMAIL_VERIFICATION = \"optional\"\nACCOUNT_UNIQUE_EMAIL = True\nCLIENT_ID = \"993464726518-dlvqdjptpid7jmdsubuivfhe36ncc0at.apps.googleusercontent.com\"\npart1 = \"GOCSPX\"\npart2 = \"ahmTIfCelacuDxLKeiZ5JiX\"\npart3 = \"Y1rx\"\nmy_string = f\"{part1}-{part2}-{part3}\"\nSOCIALACCOUNT_PROVIDERS = {\n    \"google\": {\n        \"SCOPE\": [",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_UNIQUE_EMAIL",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "ACCOUNT_UNIQUE_EMAIL = True\nCLIENT_ID = \"993464726518-dlvqdjptpid7jmdsubuivfhe36ncc0at.apps.googleusercontent.com\"\npart1 = \"GOCSPX\"\npart2 = \"ahmTIfCelacuDxLKeiZ5JiX\"\npart3 = \"Y1rx\"\nmy_string = f\"{part1}-{part2}-{part3}\"\nSOCIALACCOUNT_PROVIDERS = {\n    \"google\": {\n        \"SCOPE\": [\n            \"profile\",",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "CLIENT_ID = \"993464726518-dlvqdjptpid7jmdsubuivfhe36ncc0at.apps.googleusercontent.com\"\npart1 = \"GOCSPX\"\npart2 = \"ahmTIfCelacuDxLKeiZ5JiX\"\npart3 = \"Y1rx\"\nmy_string = f\"{part1}-{part2}-{part3}\"\nSOCIALACCOUNT_PROVIDERS = {\n    \"google\": {\n        \"SCOPE\": [\n            \"profile\",\n            \"email\",",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "part1",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "part1 = \"GOCSPX\"\npart2 = \"ahmTIfCelacuDxLKeiZ5JiX\"\npart3 = \"Y1rx\"\nmy_string = f\"{part1}-{part2}-{part3}\"\nSOCIALACCOUNT_PROVIDERS = {\n    \"google\": {\n        \"SCOPE\": [\n            \"profile\",\n            \"email\",\n        ],",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "part2",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "part2 = \"ahmTIfCelacuDxLKeiZ5JiX\"\npart3 = \"Y1rx\"\nmy_string = f\"{part1}-{part2}-{part3}\"\nSOCIALACCOUNT_PROVIDERS = {\n    \"google\": {\n        \"SCOPE\": [\n            \"profile\",\n            \"email\",\n        ],\n        \"AUTH_PARAMS\": {",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "part3",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "part3 = \"Y1rx\"\nmy_string = f\"{part1}-{part2}-{part3}\"\nSOCIALACCOUNT_PROVIDERS = {\n    \"google\": {\n        \"SCOPE\": [\n            \"profile\",\n            \"email\",\n        ],\n        \"AUTH_PARAMS\": {\n            \"access_type\": \"online\",",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "my_string",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "my_string = f\"{part1}-{part2}-{part3}\"\nSOCIALACCOUNT_PROVIDERS = {\n    \"google\": {\n        \"SCOPE\": [\n            \"profile\",\n            \"email\",\n        ],\n        \"AUTH_PARAMS\": {\n            \"access_type\": \"online\",\n            \"prompt\": \"select_account\",",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "SOCIALACCOUNT_PROVIDERS",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "SOCIALACCOUNT_PROVIDERS = {\n    \"google\": {\n        \"SCOPE\": [\n            \"profile\",\n            \"email\",\n        ],\n        \"AUTH_PARAMS\": {\n            \"access_type\": \"online\",\n            \"prompt\": \"select_account\",\n        },",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "SITE_ID",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "SITE_ID = 2\nLOGIN_REDIRECT_URL = \"/login/\"\nLOGOUT_REDIRECT_URL = \"/\"\nAUTH_USER_MODEL = \"user.User\"",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = \"/login/\"\nLOGOUT_REDIRECT_URL = \"/\"\nAUTH_USER_MODEL = \"user.User\"",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "LOGOUT_REDIRECT_URL = \"/\"\nAUTH_USER_MODEL = \"user.User\"",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "AUTH_USER_MODEL = \"user.User\"",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.urls",
        "description": "FeatherFarmSoloutions.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('stakeholder.urls')),\n    path('hotel/', include('hoteldetails.urls')),\n    path('accounts/', include('allauth.urls')),\n    path('logout/', logout_view, name='logout'),\n    path('password_reset/', auth_views.PasswordResetView.as_view(),\n         name='password_reset'),\n    path('password_reset/done/', auth_views.PasswordResetDoneView.as_view(),\n         name='password_reset_done'),",
        "detail": "FeatherFarmSoloutions.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.wsgi",
        "description": "FeatherFarmSoloutions.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "FeatherFarmSoloutions.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "hoteldetails.migrations.0001_initial",
        "description": "hoteldetails.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Cart',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('created_at', models.DateTimeField(auto_now_add=True)),",
        "detail": "hoteldetails.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "hoteldetails.migrations.0002_initial",
        "description": "hoteldetails.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('hoteldetails', '0001_initial'),\n        ('stakeholder', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='cart',",
        "detail": "hoteldetails.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "hoteldetails.migrations.0003_hoteluser",
        "description": "hoteldetails.migrations.0003_hoteluser",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"hoteldetails\", \"0002_initial\"),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"HotelUser\",\n            fields=[\n                (",
        "detail": "hoteldetails.migrations.0003_hoteluser",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "hoteldetails.migrations.0004_hoteluser_hotel_name_hoteluser_latitude_and_more",
        "description": "hoteldetails.migrations.0004_hoteluser_hotel_name_hoteluser_latitude_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"hoteldetails\", \"0003_hoteluser\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"hoteluser\",\n            name=\"hotel_name\",\n            field=models.CharField(default=\"hrllo\", max_length=100),\n            preserve_default=False,",
        "detail": "hoteldetails.migrations.0004_hoteluser_hotel_name_hoteluser_latitude_and_more",
        "documentation": {}
    },
    {
        "label": "HoteldetailsConfig",
        "kind": 6,
        "importPath": "hoteldetails.apps",
        "description": "hoteldetails.apps",
        "peekOfCode": "class HoteldetailsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'hoteldetails'",
        "detail": "hoteldetails.apps",
        "documentation": {}
    },
    {
        "label": "HotelFormUserForm",
        "kind": 6,
        "importPath": "hoteldetails.forms",
        "description": "hoteldetails.forms",
        "peekOfCode": "class HotelFormUserForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields = [\n            \"email\",\n            \"full_name\",\n            \"phone_number\",\n        ]\nclass HotelForm(forms.ModelForm):\n    class Meta:",
        "detail": "hoteldetails.forms",
        "documentation": {}
    },
    {
        "label": "HotelForm",
        "kind": 6,
        "importPath": "hoteldetails.forms",
        "description": "hoteldetails.forms",
        "peekOfCode": "class HotelForm(forms.ModelForm):\n    class Meta:\n        model = HotelUser\n        fields = [\"hotel_name\", \"address\", \"hotel_license\", \"latitude\", \"longitude\"]\nclass OrderForm(forms.Form):\n    one_kg_count = forms.IntegerField(\n        min_value=0, required=False, label=\"1 kg chickens\", initial=0\n    )\n    two_kg_count = forms.IntegerField(\n        min_value=0, required=False, label=\"2 kg chickens\", initial=0",
        "detail": "hoteldetails.forms",
        "documentation": {}
    },
    {
        "label": "OrderForm",
        "kind": 6,
        "importPath": "hoteldetails.forms",
        "description": "hoteldetails.forms",
        "peekOfCode": "class OrderForm(forms.Form):\n    one_kg_count = forms.IntegerField(\n        min_value=0, required=False, label=\"1 kg chickens\", initial=0\n    )\n    two_kg_count = forms.IntegerField(\n        min_value=0, required=False, label=\"2 kg chickens\", initial=0\n    )\n    three_kg_count = forms.IntegerField(\n        min_value=0, required=False, label=\"3 kg chickens\", initial=0\n    )",
        "detail": "hoteldetails.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "hoteldetails.forms",
        "description": "hoteldetails.forms",
        "peekOfCode": "User = get_user_model()\nclass HotelFormUserForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields = [\n            \"email\",\n            \"full_name\",\n            \"phone_number\",\n        ]\nclass HotelForm(forms.ModelForm):",
        "detail": "hoteldetails.forms",
        "documentation": {}
    },
    {
        "label": "HotelUser",
        "kind": 6,
        "importPath": "hoteldetails.models",
        "description": "hoteldetails.models",
        "peekOfCode": "class HotelUser(models.Model):\n    hotel_name = models.CharField(max_length=100)\n    hotel_owner = models.ForeignKey(\n        User, on_delete=models.CASCADE, related_name=\"hotel_users\"\n    )\n    expiry_date = models.DateField(default=None, blank=True, null=True)\n    hotel_license = models.FileField(upload_to=\"hotel_licenses/\", blank=True, null=True)\n    address = models.CharField(max_length=255, blank=True, null=True)\n    latitude = models.FloatField(blank=True, null=True)  # New field for latitude\n    longitude = models.FloatField(blank=True, null=True)  # New field for longitude",
        "detail": "hoteldetails.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "hoteldetails.models",
        "description": "hoteldetails.models",
        "peekOfCode": "class Order(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    batch = models.ForeignKey(ChickBatch, on_delete=models.CASCADE)\n    # Quantities ordered by the hotel for different weights\n    one_kg_count = models.IntegerField(\n        default=0, help_text=\"Number of 1 kg chickens ordered\"\n    )\n    two_kg_count = models.IntegerField(\n        default=0, help_text=\"Number of 2 kg chickens ordered\"\n    )",
        "detail": "hoteldetails.models",
        "documentation": {}
    },
    {
        "label": "Cart",
        "kind": 6,
        "importPath": "hoteldetails.models",
        "description": "hoteldetails.models",
        "peekOfCode": "class Cart(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"cart\")\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"cart of {self.user.full_name}\"\n    def get_farm_address(self):\n        farm = self.user.farms.first()  # Assuming each user has at least one farm\n        return farm.address if farm else \"No farm address available\"\nclass CartItem(models.Model):\n    ITEM_TYPE_CHOICES = [(\"live\", \"Live\"), (\"processed\", \"Processed\")]",
        "detail": "hoteldetails.models",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "kind": 6,
        "importPath": "hoteldetails.models",
        "description": "hoteldetails.models",
        "peekOfCode": "class CartItem(models.Model):\n    ITEM_TYPE_CHOICES = [(\"live\", \"Live\"), (\"processed\", \"Processed\")]\n    cart = models.ForeignKey(Cart, on_delete=models.CASCADE, related_name=\"items\")\n    chick_batch = models.ForeignKey(ChickBatch, on_delete=models.CASCADE)\n    # New fields for weight categories\n    one_kg_count = models.IntegerField(\n        default=0, help_text=\"Number of 1 kg chickens ordered\"\n    )\n    two_kg_count = models.IntegerField(\n        default=0, help_text=\"Number of 2 kg chickens ordered\"",
        "detail": "hoteldetails.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "hoteldetails.urls",
        "description": "hoteldetails.urls",
        "peekOfCode": "urlpatterns = [\n    path('', hoteldashboard, name=\"hoteldashboard\"),\n    path('view_profile/<int:id>', view_profile, name=\"view_profile\"),\n    path('view_orders', view_orders, name=\"view_orders\"),\n    path('view_farm/<int:farm_id>', view_farm, name='view_farm'),\n    path('cart_view', cart_view, name=\"cart_view\"),\n    path('checkout_view', checkout_view, name=\"checkout_view\"),\n    path(\"update-cart/\", update_cart, name=\"update_cart\"),\n]",
        "detail": "hoteldetails.urls",
        "documentation": {}
    },
    {
        "label": "calculate_distance",
        "kind": 2,
        "importPath": "hoteldetails.utility",
        "description": "hoteldetails.utility",
        "peekOfCode": "def calculate_distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the Haversine distance between two points on Earth in kilometers.\n    \"\"\"\n    R = 6371  # Radius of the Earth in kilometers\n    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))",
        "detail": "hoteldetails.utility",
        "documentation": {}
    },
    {
        "label": "send_order_confirmation_email",
        "kind": 2,
        "importPath": "hoteldetails.utility",
        "description": "hoteldetails.utility",
        "peekOfCode": "def send_order_confirmation_email(email, order):\n    \"\"\"Send an order confirmation email to the user.\"\"\"\n    subject = f\"Order Confirmation - #{order.id}\"\n    context = {\n        \"order\": order,\n        \"delivery_date\": order.delivery_date,\n        \"total_price\": f\"${order.price:.2f}\",\n        \"delivery_option\": order.delivery_option,\n    }\n    # Render email content",
        "detail": "hoteldetails.utility",
        "documentation": {}
    },
    {
        "label": "hoteldashboard",
        "kind": 2,
        "importPath": "hoteldetails.views",
        "description": "hoteldetails.views",
        "peekOfCode": "def hoteldashboard(request):\n    # Get query parameters\n    batch_type = request.GET.get(\"batch_type\", \"\")\n    query = request.GET.get(\"q\", \"\")\n    max_distance = request.GET.get(\"max_distance\", None)\n    # Filter farms based on query parameters\n    farms = Farm.objects.all()\n    hoteluser = HotelUser.objects.filter(hotel_owner=request.user).first()\n    hotel_name = hoteluser.hotel_name\n    user_lat = hoteluser.latitude  # User latitude",
        "detail": "hoteldetails.views",
        "documentation": {}
    },
    {
        "label": "view_profile",
        "kind": 2,
        "importPath": "hoteldetails.views",
        "description": "hoteldetails.views",
        "peekOfCode": "def view_profile(request, id):\n    user = get_object_or_404(User, id=id)\n    hotel = HotelUser.objects.filter(hotel_owner=user).first() or HotelUser(\n        hotel_owner=user\n    )\n    hotel_form = HotelForm(instance=hotel)\n    user_form = HotelFormUserForm(instance=user)\n    print(request.POST)\n    if request.method == \"POST\":\n        if \"update_profile\" in request.POST:",
        "detail": "hoteldetails.views",
        "documentation": {}
    },
    {
        "label": "view_farm",
        "kind": 2,
        "importPath": "hoteldetails.views",
        "description": "hoteldetails.views",
        "peekOfCode": "def view_farm(request, farm_id):\n    user = get_object_or_404(User, id=request.user.id)\n    farm = Farm.objects.get(id=farm_id)\n    batches = farm.chick_batches.filter(\n        batch_status=\"completed\"\n    )  # Only show completed batches\n    order_form = OrderForm()\n    if request.method == \"POST\":\n        form = OrderForm(request.POST)\n        batch_id = request.POST.get(\"batch_id\")",
        "detail": "hoteldetails.views",
        "documentation": {}
    },
    {
        "label": "cart_view",
        "kind": 2,
        "importPath": "hoteldetails.views",
        "description": "hoteldetails.views",
        "peekOfCode": "def cart_view(request):\n    try:\n        cart = Cart.objects.get(user=request.user)\n    except Cart.DoesNotExist:\n        cart = None\n    cartitems = CartItem.objects.filter(cart=cart)\n    total_price = sum(item.total_price() or 0 for item in cartitems)\n    total_discounted = sum(item.discounted_price for item in cartitems)\n    is_empty = len(cartitems) == 0\n    return render(",
        "detail": "hoteldetails.views",
        "documentation": {}
    },
    {
        "label": "update_cart",
        "kind": 2,
        "importPath": "hoteldetails.views",
        "description": "hoteldetails.views",
        "peekOfCode": "def update_cart(request):\n    if request.method == \"POST\":\n        # Retrieve the cart\n        cart = get_object_or_404(Cart, user=request.user)\n        # Iterate through the submitted items and update their types\n        for item_id, item_type in request.POST.items():\n            if item_id.startswith(\"type_\"):  # Check for type-related keys\n                cart_item_id = item_id.split(\"_\")[1]\n                cart_item = get_object_or_404(CartItem, id=cart_item_id, cart=cart)\n                cart_item.is_processed = item_type == \"processed\"",
        "detail": "hoteldetails.views",
        "documentation": {}
    },
    {
        "label": "checkout_view",
        "kind": 2,
        "importPath": "hoteldetails.views",
        "description": "hoteldetails.views",
        "peekOfCode": "def checkout_view(request):\n    cart = Cart.objects.get(user=request.user)\n    items = cart.items.all()\n    # Check if the cart has items\n    if not items:\n        messages.error(request, \"Your cart is empty.\")\n        return redirect(\"cart_view\")\n    # Calculate prices\n    total_price = sum(item.total_price() or Decimal(\"0.00\") for item in items)\n    total_discounted = sum(item.discounted_price for item in items)",
        "detail": "hoteldetails.views",
        "documentation": {}
    },
    {
        "label": "view_orders",
        "kind": 2,
        "importPath": "hoteldetails.views",
        "description": "hoteldetails.views",
        "peekOfCode": "def view_orders(request):\n    orders = Order.objects.filter(user=request.user)\n    return render(request, \"hoteldetials/orderview.html\", {\"orders\": orders})\nfrom django.core.mail import send_mail\nfrom django.template.loader import render_to_string\nfrom django.conf import settings\ndef send_order_confirmation_email(email,order):\n    # Prepare the context with order details\n    context = {\n        'order': order,",
        "detail": "hoteldetails.views",
        "documentation": {}
    },
    {
        "label": "send_order_confirmation_email",
        "kind": 2,
        "importPath": "hoteldetails.views",
        "description": "hoteldetails.views",
        "peekOfCode": "def send_order_confirmation_email(email,order):\n    # Prepare the context with order details\n    context = {\n        'order': order,\n        'total_price': order.total_price(),  # Call the total_price method\n        'delivery_option': order.delivery_option,\n        'delivery_date': order.delivery_date,\n    }\n    # Render the HTML content using the template\n    subject = f\"Order Confirmation - Order ID: {order.id}\"",
        "detail": "hoteldetails.views",
        "documentation": {}
    },
    {
        "label": "place_order",
        "kind": 2,
        "importPath": "hoteldetails.views",
        "description": "hoteldetails.views",
        "peekOfCode": "def place_order(request):\n    if request.method == 'POST':\n        # Get the batch and validate price\n        batch = get_object_or_404(ChickBatch, id=request.POST.get('batch_id'))\n        # Ensure price is set and not zero\n        if not batch.price_per_kg or float(batch.price_per_kg) <= 0:\n            messages.error(request, \"Invalid price. Please contact the administrator.\")\n            return redirect('cart_view')\n        # Calculate total price\n        quantity = int(request.POST.get('quantity', 0))",
        "detail": "hoteldetails.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "management.commands.check_user_status",
        "description": "management.commands.check_user_status",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Check all users and deactivate if their pollution certificate has expired'\n    def handle(self, *args, **kwargs):\n        users = User.objects.all()\n        for user in users:\n            user.check_certificate_status()\n            self.stdout.write(f'Checked {user.email}, is_active: {user.is_active}')",
        "detail": "management.commands.check_user_status",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "stakeholder.migrations.0001_initial",
        "description": "stakeholder.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ChickBatch',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('initial_chick_count', models.IntegerField(help_text='Initial number of chicks in the batch')),",
        "detail": "stakeholder.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "stakeholder.migrations.0002_initial",
        "description": "stakeholder.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('stakeholder', '0001_initial'),\n        ('user', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='chickbatch',",
        "detail": "stakeholder.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "stakeholder.migrations.0003_farm",
        "description": "stakeholder.migrations.0003_farm",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"stakeholder\", \"0002_initial\"),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"Farm\",\n            fields=[\n                (",
        "detail": "stakeholder.migrations.0003_farm",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "stakeholder.migrations.0004_alter_farm_farm_image",
        "description": "stakeholder.migrations.0004_alter_farm_farm_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"stakeholder\", \"0003_farm\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"farm\",\n            name=\"farm_image\",\n            field=models.ImageField(\n                blank=True, max_length=255, null=True, upload_to=\"images/\"",
        "detail": "stakeholder.migrations.0004_alter_farm_farm_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "stakeholder.migrations.0005_farm_certification_file_farm_certification_type_and_more",
        "description": "stakeholder.migrations.0005_farm_certification_file_farm_certification_type_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"stakeholder\", \"0004_alter_farm_farm_image\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"farm\",\n            name=\"certification_file\",\n            field=models.FileField(blank=True, null=True, upload_to=\"certifications/\"),\n        ),",
        "detail": "stakeholder.migrations.0005_farm_certification_file_farm_certification_type_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "stakeholder.migrations.0006_farm_address_farm_expiry_date",
        "description": "stakeholder.migrations.0006_farm_address_farm_expiry_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\n            \"stakeholder\",\n            \"0005_farm_certification_file_farm_certification_type_and_more\",\n        ),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"farm\",",
        "detail": "stakeholder.migrations.0006_farm_address_farm_expiry_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "stakeholder.migrations.0007_alter_farm_address",
        "description": "stakeholder.migrations.0007_alter_farm_address",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"stakeholder\", \"0006_farm_address_farm_expiry_date\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"farm\",\n            name=\"address\",\n            field=models.CharField(blank=True, max_length=255, null=True),\n        ),",
        "detail": "stakeholder.migrations.0007_alter_farm_address",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "stakeholder.migrations.0008_remove_farm_location",
        "description": "stakeholder.migrations.0008_remove_farm_location",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"stakeholder\", \"0007_alter_farm_address\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"farm\",\n            name=\"location\",\n        ),\n    ]",
        "detail": "stakeholder.migrations.0008_remove_farm_location",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "stakeholder.migrations.0009_chickbatch_farm_alter_chickbatch_user",
        "description": "stakeholder.migrations.0009_chickbatch_farm_alter_chickbatch_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"stakeholder\", \"0008_remove_farm_location\"),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"chickbatch\",\n            name=\"farm\",\n            field=models.ForeignKey(",
        "detail": "stakeholder.migrations.0009_chickbatch_farm_alter_chickbatch_user",
        "documentation": {}
    },
    {
        "label": "SupplierAdmin",
        "kind": 6,
        "importPath": "stakeholder.admin",
        "description": "stakeholder.admin",
        "peekOfCode": "class SupplierAdmin(admin.ModelAdmin):\n    list_display = (\n        \"supplier_code\",\n        \"name\",\n        \"email\",\n        \"phone_number\",\n        \"is_active\",\n    )  # Fields to display in the admin list\n    search_fields = (\n        \"supplier_code\",",
        "detail": "stakeholder.admin",
        "documentation": {}
    },
    {
        "label": "StakeholderConfig",
        "kind": 6,
        "importPath": "stakeholder.apps",
        "description": "stakeholder.apps",
        "peekOfCode": "class StakeholderConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'stakeholder'",
        "detail": "stakeholder.apps",
        "documentation": {}
    },
    {
        "label": "StakeholderUserForm",
        "kind": 6,
        "importPath": "stakeholder.forms",
        "description": "stakeholder.forms",
        "peekOfCode": "class StakeholderUserForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields = [\n            \"email\",\n            \"full_name\",\n            \"phone_number\",\n        ]\nfrom .models import Farm\nclass FarmForm(forms.ModelForm):",
        "detail": "stakeholder.forms",
        "documentation": {}
    },
    {
        "label": "FarmForm",
        "kind": 6,
        "importPath": "stakeholder.forms",
        "description": "stakeholder.forms",
        "peekOfCode": "class FarmForm(forms.ModelForm):\n    class Meta:\n        model = Farm\n        fields = [\n            \"name\",\n            \"farm_image\",\n            \"length\",\n            \"breadth\",\n            \"latitude\",\n            \"longitude\",",
        "detail": "stakeholder.forms",
        "documentation": {}
    },
    {
        "label": "DailyDataForm",
        "kind": 6,
        "importPath": "stakeholder.forms",
        "description": "stakeholder.forms",
        "peekOfCode": "class DailyDataForm(forms.ModelForm):\n    class Meta:\n        model = DailyData\n        fields = [\n            \"date\",\n            \"alive_count\",\n            \"sick_chicks\",\n            \"weight_gain\",\n            \"feed_uplifted\",\n            \"water_consumption\",",
        "detail": "stakeholder.forms",
        "documentation": {}
    },
    {
        "label": "ChickenBatchForm",
        "kind": 6,
        "importPath": "stakeholder.forms",
        "description": "stakeholder.forms",
        "peekOfCode": "class ChickenBatchForm(forms.ModelForm):\n    class Meta:\n        model = ChickBatch\n        fields = [\"price_per_kg\", \"price_per_batch\", \"batch_status\", \"duration\"]\nclass CompletedBatchUpdateForm(forms.ModelForm):\n    \"\"\"Form for updating count of chickens in 1kg, 2kg, and 3kg categories.\"\"\"\n    class Meta:\n        model = ChickBatch\n        fields = [\"one_kg_count\", \"two_kg_count\", \"three_kg_count\"]\n        widgets = {",
        "detail": "stakeholder.forms",
        "documentation": {}
    },
    {
        "label": "CompletedBatchUpdateForm",
        "kind": 6,
        "importPath": "stakeholder.forms",
        "description": "stakeholder.forms",
        "peekOfCode": "class CompletedBatchUpdateForm(forms.ModelForm):\n    \"\"\"Form for updating count of chickens in 1kg, 2kg, and 3kg categories.\"\"\"\n    class Meta:\n        model = ChickBatch\n        fields = [\"one_kg_count\", \"two_kg_count\", \"three_kg_count\"]\n        widgets = {\n            \"one_kg_count\": forms.NumberInput(\n                attrs={\"min\": 0, \"class\": \"form-control\", \"id\": \"one-kg-count\"}\n            ),\n            \"two_kg_count\": forms.NumberInput(",
        "detail": "stakeholder.forms",
        "documentation": {}
    },
    {
        "label": "BatchSelectionForm",
        "kind": 6,
        "importPath": "stakeholder.forms",
        "description": "stakeholder.forms",
        "peekOfCode": "class BatchSelectionForm(forms.Form):\n    batch = forms.ModelChoiceField(\n        queryset=ChickBatch.objects.none(), label=\"Select Batch\"\n    )\n    def __init__(self, *args, **kwargs):\n        user = kwargs.pop(\"user\")  # Get user from kwargs\n        super().__init__(*args, **kwargs)\n        self.fields[\"batch\"].queryset = ChickBatch.objects.filter(user=user)  # Filter\nclass DailyComparisonForm(forms.Form):\n    current_batch = forms.ModelChoiceField(",
        "detail": "stakeholder.forms",
        "documentation": {}
    },
    {
        "label": "DailyComparisonForm",
        "kind": 6,
        "importPath": "stakeholder.forms",
        "description": "stakeholder.forms",
        "peekOfCode": "class DailyComparisonForm(forms.Form):\n    current_batch = forms.ModelChoiceField(\n        queryset=ChickBatch.objects.none()\n    )  # Start with empty queryset\n    past_batch = forms.ModelChoiceField(queryset=ChickBatch.objects.none())\n    compare_day = forms.IntegerField(\n        min_value=1,\n        max_value=40,\n        error_messages={\n            \"min_value\": \"The compare day must be at least 1.\",",
        "detail": "stakeholder.forms",
        "documentation": {}
    },
    {
        "label": "FeedMonitoringForm",
        "kind": 6,
        "importPath": "stakeholder.forms",
        "description": "stakeholder.forms",
        "peekOfCode": "class FeedMonitoringForm(forms.ModelForm):\n    class Meta:\n        model = FeedMonitoring\n        fields = [\"batch\", \"date\", \"feed_consumed\", \"feed_wastage\", \"feed_forecast\"]\n        widgets = {\n            # Use a date picker for the date field\n            \"date\": forms.DateInput(attrs={\"type\": \"date\"}),\n            # Allow decimal input\n            \"feed_consumed\": forms.NumberInput(attrs={\"step\": \"0.01\"}),\n            # Allow decimal input",
        "detail": "stakeholder.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "stakeholder.forms",
        "description": "stakeholder.forms",
        "peekOfCode": "User = get_user_model()\nclass StakeholderUserForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields = [\n            \"email\",\n            \"full_name\",\n            \"phone_number\",\n        ]\nfrom .models import Farm",
        "detail": "stakeholder.forms",
        "documentation": {}
    },
    {
        "label": "Farm",
        "kind": 6,
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "peekOfCode": "class Farm(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n    owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"farms\")\n    farm_image = models.ImageField(\n        upload_to=\"images/\", max_length=255, null=True, blank=True\n    )\n    length = models.FloatField(default=None, blank=True, null=True)\n    breadth = models.FloatField(default=None, blank=True, null=True)\n    size = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)\n    established_date = models.DateField(null=True, blank=True)",
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "ChickBatch",
        "kind": 6,
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "peekOfCode": "class ChickBatch(models.Model):\n    STATUS_CHOICES = [(\"active\", \"Active\"), (\"completed\", \"Completed\")]\n    TYPE_CHOICES = [(\"broiler\", \"Broiler\"), (\"organic\", \"Organic\"), (\"kada\", \"Kada\")]\n    user = models.ForeignKey(\n        User, on_delete=models.CASCADE, related_name=\"farm_user\"\n    )\n    farm = models.ForeignKey(\n        Farm, on_delete=models.CASCADE, related_name=\"chick_batches\"\n    ) \n    initial_chick_count = models.IntegerField(",
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "DailyData",
        "kind": 6,
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "peekOfCode": "class DailyData(models.Model):\n    batch = models.ForeignKey(\n        ChickBatch, on_delete=models.CASCADE, related_name=\"daily_data\"\n    )\n    owner = models.ForeignKey(\n        User, on_delete=models.CASCADE, related_name=\"daily_data_records\"\n    )\n    date = models.DateField(default=timezone.now)  # Date for daily record\n    alive_count = models.IntegerField(help_text=\"Number of chicks alive on this day\")\n    sick_chicks = models.IntegerField(default=0, help_text=\"Number of sick chicks\")",
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "FeedMonitoring",
        "kind": 6,
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "peekOfCode": "class FeedMonitoring(models.Model):\n    batch = models.ForeignKey(ChickBatch, on_delete=models.CASCADE)\n    date = models.DateField()\n    feed_consumed = models.FloatField(default=0.0)\n    feed_forecast = models.FloatField(default=0.0)\n    feed_wastage = models.FloatField(default=0.0)\n    def __str__(self):\n        return f\"Feed Monitoring for Batch {self.batch.batch_date} on {self.date}\"\n    class Meta:\n        verbose_name = \"Feed Monitoring\"",
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "ChickSupply",
        "kind": 6,
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "peekOfCode": "class ChickSupply(models.Model):\n    batch = models.ForeignKey(\n        ChickBatch, on_delete=models.CASCADE, related_name=\"chick_supplies\"\n    )\n    stakeholder = models.ForeignKey(\n        User, on_delete=models.CASCADE, related_name=\"chick_supplies\"\n    )  # Link to stakeholder\n    date = models.DateField(default=timezone.now)\n    chicks_supplied = models.IntegerField(\n        help_text=\"Number of chicks supplied on this day\"",
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "VaccinationSchedule",
        "kind": 6,
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "peekOfCode": "class VaccinationSchedule(models.Model):\n    batch = models.ForeignKey(\n        ChickBatch, on_delete=models.CASCADE, related_name=\"vaccination_schedules\"\n    )\n    vaccine = models.ForeignKey(Vaccine, on_delete=models.CASCADE)\n    vaccination_date = models.DateField()\n    def user(self):\n        return self.batch.user  # Access user from the related ChickBatch\n    def __str__(self):\n        return f\"{self.batch} - {self.vaccine.name} on {self.vaccination_date}\"",
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "peekOfCode": "class Post(models.Model):\n    owner = models.ForeignKey(\n        settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name=\"posts\"\n    )\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.title",
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "peekOfCode": "class Comment(models.Model):\n    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name=\"comments\")\n    owner = models.ForeignKey(\n        settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name=\"comments\"\n    )\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return f\"Comment by {self.owner.email} on {self.post.title}\"",
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "send_whatsapp_message",
        "kind": 2,
        "importPath": "stakeholder.notifications",
        "description": "stakeholder.notifications",
        "peekOfCode": "def send_whatsapp_message(to, body):\n    # Initialize Twilio client\n    client = Client(settings.TWILIO_ACCOUNT_SID, settings.TWILIO_AUTH_TOKEN)\n    # Send a WhatsApp message\n    message = client.messages.create(\n        body=body,\n        from_=settings.TWILIO_WHATSAPP_FROM,\n        to=f'whatsapp:{to}'  # WhatsApp destination number\n    )\n    return message.sid",
        "detail": "stakeholder.notifications",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "stakeholder.urls",
        "description": "stakeholder.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", views.home, name=\"home\"),\n    path(\"about/\", views.about, name=\"about\"),\n    path(\"services/\", views.services, name=\"services\"),\n    path(\"contact/\", views.contact, name=\"contact\"),\n    path(\"about/contact/\", views.contact, name=\"about_contact\"),\n    path(\"login/\", CustomLoginView.as_view(), name=\"login\"),\n    path(\"signup/\", register, name=\"signup\"),\n    path(\"stakeholder/\", views.stakeholder, name=\"stakeholder\"),\n    path(\"stateholder_batch/\", views.stateholder_batch, name=\"stateholder_batch\"),",
        "detail": "stakeholder.urls",
        "documentation": {}
    },
    {
        "label": "add_or_edit_farm",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def add_or_edit_farm(request, id):\n    # Fetch the user by ID\n    user = get_object_or_404(User, id=id)\n    # If the user already has a farm, fetch it; otherwise, create a new instance\n    farm = Farm.objects.filter(owner=user).first() or Farm(owner=user)\n    # Initialize the forms with default values\n    user_form = StakeholderUserForm(instance=user)\n    farm_form = FarmForm(instance=farm)\n    if request.method == \"POST\":\n        if \"update_profile\" in request.POST:",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "stakeholder",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def stakeholder(request):\n    user = request.user  # Assuming the user is logged in\n    today = timezone.now().date()\n    farm = Farm.objects.filter(owner=user).first()\n    # Fetch chick batches\n    chick_batches = farm.chick_batches.all().order_by(\"-batch_date\")\n    total_chick_count = sum(batch.initial_chick_count for batch in chick_batches)\n    # Fetch location from query parameters (not from the User model)\n    latitude = request.GET.get(\"lat\")\n    longitude = request.GET.get(\"lon\")",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def home(request):\n    return render(request, \"index.html\")\ndef about(request):\n    return render(request, \"about.html\")\ndef services(request):\n    return render(request, \"services.html\")\ndef contact(request):\n    return render(request, \"contact.html\")\ndef logout_view(request):\n    logout(request)",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "about",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def about(request):\n    return render(request, \"about.html\")\ndef services(request):\n    return render(request, \"services.html\")\ndef contact(request):\n    return render(request, \"contact.html\")\ndef logout_view(request):\n    logout(request)\n    return redirect(\"/\")\n# views.py",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "services",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def services(request):\n    return render(request, \"services.html\")\ndef contact(request):\n    return render(request, \"contact.html\")\ndef logout_view(request):\n    logout(request)\n    return redirect(\"/\")\n# views.py\ndef calculate_feeders_and_drinkers(initial_chick_count):\n    feeders = initial_chick_count // 50  # 1 feeder for every 50 chicks",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "contact",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def contact(request):\n    return render(request, \"contact.html\")\ndef logout_view(request):\n    logout(request)\n    return redirect(\"/\")\n# views.py\ndef calculate_feeders_and_drinkers(initial_chick_count):\n    feeders = initial_chick_count // 50  # 1 feeder for every 50 chicks\n    drinkers = initial_chick_count // 50  # 1 drinker for every 50 chicks\n    return feeders, drinkers",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "logout_view",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def logout_view(request):\n    logout(request)\n    return redirect(\"/\")\n# views.py\ndef calculate_feeders_and_drinkers(initial_chick_count):\n    feeders = initial_chick_count // 50  # 1 feeder for every 50 chicks\n    drinkers = initial_chick_count // 50  # 1 drinker for every 50 chicks\n    return feeders, drinkers\ndef stateholder_batch(request):\n    user = request.user  # Assuming the user is logged in",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "calculate_feeders_and_drinkers",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def calculate_feeders_and_drinkers(initial_chick_count):\n    feeders = initial_chick_count // 50  # 1 feeder for every 50 chicks\n    drinkers = initial_chick_count // 50  # 1 drinker for every 50 chicks\n    return feeders, drinkers\ndef stateholder_batch(request):\n    user = request.user  # Assuming the user is logged in\n    farm = Farm.objects.filter(owner=user.id).first()\n    chick_batches = farm.chick_batches.all().order_by(\"-batch_date\")\n    # Prepare to store batch-wise feeders and drinkers\n    batch_info = []",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "stateholder_batch",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def stateholder_batch(request):\n    user = request.user  # Assuming the user is logged in\n    farm = Farm.objects.filter(owner=user.id).first()\n    chick_batches = farm.chick_batches.all().order_by(\"-batch_date\")\n    # Prepare to store batch-wise feeders and drinkers\n    batch_info = []\n    total_profit = 0\n    for batch in chick_batches:\n        initial_chick_count = batch.initial_chick_count\n        feeders, drinkers = calculate_feeders_and_drinkers(initial_chick_count)",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "update_chick_count",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def update_chick_count(request, id):\n    if request.method == \"POST\":\n        try:\n            # Get the current logged-in user\n            user = User.objects.get(id=id)\n        except User.DoesNotExist:\n            messages.error(request, \"User not found.\")\n            return redirect(reverse(\"stakeholderuserprofile\", args=[id]))\n        # Get chick count and other details from the form\n        initial_chick_count = request.POST.get(\"initial_chick_count\")",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "feed_request",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def feed_request(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    return render(request, \"feed_request.html\")\ndef vaccination(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    return render(request, \"vaccinations.html\", {\"user\": user})\n@login_required  # Ensure only logged-in users can add daily data\ndef add_daily_data(request):\n    selected_batch = None\n    initial_alive_count = 0",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "vaccination",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def vaccination(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    return render(request, \"vaccinations.html\", {\"user\": user})\n@login_required  # Ensure only logged-in users can add daily data\ndef add_daily_data(request):\n    selected_batch = None\n    initial_alive_count = 0\n    updated_alive_count = 0\n    updated_mortality_count = 0\n    # Filter batches based on the logged-in user",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "add_daily_data",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def add_daily_data(request):\n    selected_batch = None\n    initial_alive_count = 0\n    updated_alive_count = 0\n    updated_mortality_count = 0\n    # Filter batches based on the logged-in user\n    all_batches = ChickBatch.objects.filter(user=request.user)\n    # Initialize selected_batch_id from the session\n    selected_batch_id = request.session.get(\"selected_batch\", None)\n    # Check if a batch was submitted and store it in the session",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "calculate_weeks",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def calculate_weeks(batch_date):\n    weeks = []\n    for i in range(6):  # Create 6 weeks\n        start_date = batch_date + timedelta(days=i * 7)\n        end_date = start_date + timedelta(days=6)\n        if i == 5:  # For the 6th week, adjust the end date to only go to day 40\n            end_date = batch_date + timedelta(days=39)  # 5 extra days\n        weeks.append((start_date, end_date))\n    return weeks\ndef list_daily_data(request, batch_id):",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "list_daily_data",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def list_daily_data(request, batch_id):\n    batch = get_object_or_404(ChickBatch, id=batch_id)\n    # Initialize the error message\n    error_message = None\n    # Get the selected filters from the GET request\n    selected_category = request.GET.get(\"category\")\n    min_value = request.GET.get(\"min_value\")\n    max_value = request.GET.get(\"max_value\")\n    start_date = request.GET.get(\"start_date\")\n    end_date = request.GET.get(\"end_date\")",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "edit_daily_data",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def edit_daily_data(request, id):\n    # Fetch the specific record or return 404 if not found\n    daily_data = get_object_or_404(DailyData, id=id)\n    if request.method == \"POST\":\n        # Bind data to the form to process user input\n        form = DailyDataForm(request.POST, instance=daily_data)\n        if form.is_valid():\n            form.save()  # Save changes\n            # Redirect back to the list page\n            return redirect(\"list_daily_data\", batch_id=daily_data.batch.id)",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "delete_daily_data",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def delete_daily_data(request, daily_data_id):\n    daily_data_entry = get_object_or_404(DailyData, id=daily_data_id)\n    # Get the batch ID to redirect to the correct page\n    batch_id = daily_data_entry.batch_id  # Get the batch ID from the related batch\n    daily_data_entry.delete()\n    messages.success(request, \"Daily data entry deleted successfully.\")\n    # Redirect to the list with the batch ID\n    return redirect(\"list_daily_data\", batch_id=batch_id)\ndef daily_feed_summary(request):\n    current_batch = None",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "daily_feed_summary",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def daily_feed_summary(request):\n    current_batch = None\n    past_batch = None\n    compare_day = None\n    current_feed_uplifted = 0\n    current_weight_gain = 0\n    current_water_consumption = 0  # New metric\n    past_feed_uplifted = 0\n    past_weight_gain = 0\n    past_water_consumption = 0  # New metric",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "batch_feed_summary",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def batch_feed_summary(request):\n    if request.method == \"POST\":\n        form = BatchSelectionForm(request.POST, user=request.user)\n        if form.is_valid():\n            selected_batch = form.cleaned_data[\"batch\"]\n            # Get daily data for the selected batch\n            daily_data = DailyData.objects.filter(batch=selected_batch).order_by(\n                \"-date\"\n            )\n            # Prepare data for the chart and table",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "feed_dashboard_view",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def feed_dashboard_view(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    # For debugging purposes, you can print the user object to see if it's retrieved correctly\n    print(f\"User: {user.email}, ID: {user.id}\")\n    return render(request, \"feed_dashboard.html\", {\"user\": user})\ndef supplier_list(request):\n    \"\"\"Display the list of suppliers.\"\"\"\n    suppliers = Supplier.objects.all()  # Fetch all suppliers from the database\n    return render(request, \"supplier_list_stakeholder.html\", {\"suppliers\": suppliers})\ndef tips(request):",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "supplier_list",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def supplier_list(request):\n    \"\"\"Display the list of suppliers.\"\"\"\n    suppliers = Supplier.objects.all()  # Fetch all suppliers from the database\n    return render(request, \"supplier_list_stakeholder.html\", {\"suppliers\": suppliers})\ndef tips(request):\n    tips = WasteTip.objects.all()\n    return render(request, \"waste_management/tips.html\", {\"tips\": tips})\n@login_required\ndef forum_dashboard(request, post_id=None):\n    posts = Post.objects.all().order_by(\"-created_at\")  # Fetch all posts",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "tips",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def tips(request):\n    tips = WasteTip.objects.all()\n    return render(request, \"waste_management/tips.html\", {\"tips\": tips})\n@login_required\ndef forum_dashboard(request, post_id=None):\n    posts = Post.objects.all().order_by(\"-created_at\")  # Fetch all posts\n    selected_post = None\n    comments = None\n    # If a specific post is selected for chat\n    if post_id:",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "forum_dashboard",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def forum_dashboard(request, post_id=None):\n    posts = Post.objects.all().order_by(\"-created_at\")  # Fetch all posts\n    selected_post = None\n    comments = None\n    # If a specific post is selected for chat\n    if post_id:\n        selected_post = get_object_or_404(Post, id=post_id)\n        comments = Comment.objects.filter(post=selected_post).order_by(\"created_at\")\n    if request.method == \"POST\":\n        if \"post_title\" in request.POST:  # Handle new post",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0001_initial",
        "description": "user.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n        ('stakeholder', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='DailyTip',\n            fields=[",
        "detail": "user.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0002_remove_user_breadth_remove_user_coopcapacity_and_more",
        "description": "user.migrations.0002_remove_user_breadth_remove_user_coopcapacity_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"user\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"user\",\n            name=\"breadth\",\n        ),\n        migrations.RemoveField(",
        "detail": "user.migrations.0002_remove_user_breadth_remove_user_coopcapacity_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0003_remove_user_name",
        "description": "user.migrations.0003_remove_user_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"user\", \"0002_remove_user_breadth_remove_user_coopcapacity_and_more\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"user\",\n            name=\"name\",\n        ),\n    ]",
        "detail": "user.migrations.0003_remove_user_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0004_remove_user_location_remove_user_region",
        "description": "user.migrations.0004_remove_user_location_remove_user_region",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"user\", \"0003_remove_user_name\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"user\",\n            name=\"location\",\n        ),\n        migrations.RemoveField(",
        "detail": "user.migrations.0004_remove_user_location_remove_user_region",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0005_remove_user_certification_file_and_more",
        "description": "user.migrations.0005_remove_user_certification_file_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"user\", \"0004_remove_user_location_remove_user_region\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"user\",\n            name=\"certification_file\",\n        ),\n        migrations.RemoveField(",
        "detail": "user.migrations.0005_remove_user_certification_file_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0006_remove_user_address_remove_user_expiry_date",
        "description": "user.migrations.0006_remove_user_address_remove_user_expiry_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"user\", \"0005_remove_user_certification_file_and_more\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"user\",\n            name=\"address\",\n        ),\n        migrations.RemoveField(",
        "detail": "user.migrations.0006_remove_user_address_remove_user_expiry_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0007_user_expiry_date",
        "description": "user.migrations.0007_user_expiry_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"user\", \"0006_remove_user_address_remove_user_expiry_date\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"user\",\n            name=\"expiry_date\",\n            field=models.DateField(blank=True, default=None, null=True),\n        ),",
        "detail": "user.migrations.0007_user_expiry_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0008_remove_user_expiry_date_remove_user_hotel_license",
        "description": "user.migrations.0008_remove_user_expiry_date_remove_user_hotel_license",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"user\", \"0007_user_expiry_date\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"user\",\n            name=\"expiry_date\",\n        ),\n        migrations.RemoveField(",
        "detail": "user.migrations.0008_remove_user_expiry_date_remove_user_hotel_license",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "user.admin",
        "description": "user.admin",
        "peekOfCode": "class UserAdmin(DefaultUserAdmin):\n    model = User\n    fieldsets = (\n        (None, {\"fields\": (\"email\", \"password\")}),\n        (\n            _(\"Personal info\"),\n            {\n                \"fields\": (\n                    \"full_name\",\n                    \"phone_number\",",
        "detail": "user.admin",
        "documentation": {}
    },
    {
        "label": "UserConfig",
        "kind": 6,
        "importPath": "user.apps",
        "description": "user.apps",
        "peekOfCode": "class UserConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'user'\ndef ready(self):\n        from .tasks import schedule_expiry_notification_task\n        schedule_expiry_notification_task()",
        "detail": "user.apps",
        "documentation": {}
    },
    {
        "label": "ready",
        "kind": 2,
        "importPath": "user.apps",
        "description": "user.apps",
        "peekOfCode": "def ready(self):\n        from .tasks import schedule_expiry_notification_task\n        schedule_expiry_notification_task()",
        "detail": "user.apps",
        "documentation": {}
    },
    {
        "label": "EmailBackend",
        "kind": 6,
        "importPath": "user.backends",
        "description": "user.backends",
        "peekOfCode": "class EmailBackend(ModelBackend):\n    def authenticate(self, request, username=None, password=None, **kwargs):\n        UserModel = get_user_model()\n        try:\n            user = UserModel.objects.get(email=username)\n        except UserModel.DoesNotExist:\n            return None\n        else:\n            if user.check_password(password):\n                return user",
        "detail": "user.backends",
        "documentation": {}
    },
    {
        "label": "CustomUserCreationForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class CustomUserCreationForm(UserCreationForm):\n    error_messages = {\n        \"password_mismatch\": \"The two password fields didn’t match.\",\n    }\n    # user_type = forms.ModelChoiceField(queryset=UserType.objects.all())\n    user_type = forms.ModelChoiceField(\n        queryset=UserType.objects.all(),\n        required=False,\n        label=\"User Type\",\n        help_text=\"Select the type of user.\",",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "EmailAuthenticationForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class EmailAuthenticationForm(AuthenticationForm):\n    username = forms.EmailField(label=\"Email\", max_length=254)\n    def clean(self):\n        email = self.cleaned_data.get(\"username\")\n        password = self.cleaned_data.get(\"password\")\n        if email and password:\n            self.user_cache = authenticate(self.request, email=email, password=password)\n            if self.user_cache is None:\n                raise self.get_invalid_login_error()\n            else:",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "CustomSetPasswordForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class CustomSetPasswordForm(SetPasswordForm):\n    new_password1 = forms.CharField(\n        label=\"New Password\",\n        widget=forms.PasswordInput,\n        help_text=\"Your new password must be at least 8 characters long.\",\n    )\n    new_password2 = forms.CharField(\n        label=\"Confirm New Password\",\n        widget=forms.PasswordInput,\n        help_text=\"Enter the same password as above, for verification.\",",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "CustomUserCreationForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class CustomUserCreationForm(UserCreationForm):\n    error_messages = {\n        \"password_mismatch\": \"The two password fields didn’t match.\",\n    }\n    # user_type = forms.ModelChoiceField(queryset=UserType.objects.all())\n    user_type = forms.ModelChoiceField(\n        queryset=UserType.objects.all(),\n        required=False,\n        label=\"User Type\",\n        help_text=\"Select the type of user.\",",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "EmailAuthenticationForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class EmailAuthenticationForm(AuthenticationForm):\n    username = forms.EmailField(label=\"Email\", max_length=254)\n    def clean(self):\n        email = self.cleaned_data.get(\"username\")\n        password = self.cleaned_data.get(\"password\")\n        if email and password:\n            self.user_cache = authenticate(self.request, email=email, password=password)\n            if self.user_cache is None:\n                raise self.get_invalid_login_error()\n            else:",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "CustomSetPasswordForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class CustomSetPasswordForm(SetPasswordForm):\n    new_password1 = forms.CharField(\n        label=\"New Password\",\n        widget=forms.PasswordInput,\n        help_text=\"Your new password must be at least 8 characters long.\",\n    )\n    new_password2 = forms.CharField(\n        label=\"Confirm New Password\",\n        widget=forms.PasswordInput,\n        help_text=\"Enter the same password as above, for verification.\",",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "SupplierForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class SupplierForm(forms.ModelForm):\n    class Meta:\n        model = Supplier\n        fields = [\n            \"supplier_code\",\n            \"name\",\n            \"email\",\n            \"phone_number\",\n            \"is_active\",\n        ]  # Include is_active field",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "VaccineForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class VaccineForm(forms.ModelForm):\n    class Meta:\n        model = Vaccine\n        fields = [\"name\", \"manufacturer\", \"doses_required\", \"interval_days\"]\nfrom .models import VaccinationRecord\nclass VaccinationRecordForm(forms.ModelForm):\n    class Meta:\n        model = VaccinationRecord\n        fields = [\n            \"batch\",",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "VaccinationRecordForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class VaccinationRecordForm(forms.ModelForm):\n    class Meta:\n        model = VaccinationRecord\n        fields = [\n            \"batch\",\n            \"vaccine\",\n            \"dose_number\",\n            \"scheduled_date\",\n            \"administered_date\",\n            \"status\",",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "CustomUserManager",
        "kind": 6,
        "importPath": "user.models",
        "description": "user.models",
        "peekOfCode": "class CustomUserManager(BaseUserManager):\n    def create_user(self, email, full_name, password=None, **extra_fields):\n        if not email:\n            raise ValueError(\"The Email field must be set\")\n        email = self.normalize_email(email)\n        user = self.model(email=email, full_name=full_name, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n    def create_superuser(self, email, full_name, password=None, **extra_fields):",
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "UserType",
        "kind": 6,
        "importPath": "user.models",
        "description": "user.models",
        "peekOfCode": "class UserType(models.Model):\n    name = models.CharField(max_length=50, unique=True)\n    description = models.TextField(blank=True, null=True)\n    def __str__(self):\n        return self.name\nclass User(AbstractUser):\n    username = None  # Remove the username field\n    email = models.EmailField(unique=True)\n    user_type = models.ForeignKey(\n        UserType, on_delete=models.SET_NULL, null=True, blank=True",
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "user.models",
        "description": "user.models",
        "peekOfCode": "class User(AbstractUser):\n    username = None  # Remove the username field\n    email = models.EmailField(unique=True)\n    user_type = models.ForeignKey(\n        UserType, on_delete=models.SET_NULL, null=True, blank=True\n    )\n    full_name = models.CharField(max_length=255)\n    phone_number = models.CharField(max_length=15, blank=True, null=True)\n    # For nearest calculation\n    is_active = models.BooleanField(default=True)",
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "Supplier",
        "kind": 6,
        "importPath": "user.models",
        "description": "user.models",
        "peekOfCode": "class Supplier(models.Model):\n    supplier_code = models.CharField(\n        max_length=50, unique=True, blank=True, null=True\n    )  # Unique supplier code\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    phone_number = models.CharField(max_length=15)\n    address = models.CharField(max_length=255, blank=True, null=True)\n    # New field to track active status\n    is_active = models.BooleanField(default=True)",
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "Vaccine",
        "kind": 6,
        "importPath": "user.models",
        "description": "user.models",
        "peekOfCode": "class Vaccine(models.Model):\n    name = models.CharField(max_length=100)\n    manufacturer = models.CharField(max_length=100)\n    doses_required = models.PositiveIntegerField()\n    interval_days = models.PositiveIntegerField()  # Days between doses\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return self.name\nclass VaccinationRecord(models.Model):\n    batch = models.ForeignKey(\"stakeholder.ChickBatch\", on_delete=models.CASCADE)",
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "VaccinationRecord",
        "kind": 6,
        "importPath": "user.models",
        "description": "user.models",
        "peekOfCode": "class VaccinationRecord(models.Model):\n    batch = models.ForeignKey(\"stakeholder.ChickBatch\", on_delete=models.CASCADE)\n    vaccine = models.ForeignKey(Vaccine, on_delete=models.CASCADE)\n    dose_number = models.PositiveIntegerField()\n    scheduled_date = models.DateField()\n    administered_date = models.DateField(null=True, blank=True)\n    status = models.CharField(\n        max_length=10,\n        choices=[(\"pending\", \"Pending\"), (\"completed\", \"Completed\")],\n        default=\"pending\",",
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "WasteManagementResource",
        "kind": 6,
        "importPath": "user.models",
        "description": "user.models",
        "peekOfCode": "class WasteManagementResource(models.Model):\n    title = models.CharField(max_length=255)\n    description = models.TextField()\n    resource_type = models.CharField(\n        max_length=50,\n        choices=[\n            (\"GUIDE\", \"Guide\"),\n            (\"VIDEO\", \"Video\"),\n            (\"ARTICLE\", \"Article\"),\n            (\"INFOGRAPHIC\", \"Infographic\"),",
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "DailyTip",
        "kind": 6,
        "importPath": "user.models",
        "description": "user.models",
        "peekOfCode": "class DailyTip(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    category = models.CharField(\n        max_length=50,\n        choices=[\n            (\"GENERAL\", \"General\"),\n            (\"COMPOSTING\", \"Composting\"),\n            (\"RECYCLING\", \"Recycling\"),\n            (\"WATER\", \"Water Conservation\"),",
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "save",
        "kind": 2,
        "importPath": "user.models",
        "description": "user.models",
        "peekOfCode": "def save(self, *args, **kwargs):\n    if not self.region:\n        # Get full address and region using the latitude and longitude\n        location_data = get_full_address_and_region(self.latitude, self.longitude)\n        if location_data:\n            self.address = location_data[\"address\"]\n            self.region = location_data[\"region\"]\n    # Ensure the parent class's save method is called\n    super(User, self).save(*args, **kwargs)\n    def get_live_chick_counts_and_weights(self):",
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "user.signals",
        "description": "user.signals",
        "peekOfCode": "class User(AbstractUser):\n    # Your existing fields...\n    def check_certificate_status(self):\n        \"\"\"Check if the pollution certificate is still valid.\"\"\"\n        if self.expiry_date and self.expiry_date < timezone.now().date():\n            # Expiry date has passed, make the user inactive\n            self.is_active = False\n        else:\n            # Expiry date is valid, make the user active\n            self.is_active = True",
        "detail": "user.signals",
        "documentation": {}
    },
    {
        "label": "deactivate_expired_users",
        "kind": 2,
        "importPath": "user.tasks",
        "description": "user.tasks",
        "peekOfCode": "def deactivate_expired_users():\n    today = timezone.now().date()\n    users_to_deactivate = User.objects.filter(expiry_date__lt=today, is_active=True)\n    for user in users_to_deactivate:\n        user.is_active = False\n        user.save()\n        print(f\"Deactivated user: {user.email}\")\n    return f\"{len(users_to_deactivate)} users deactivated.\"\n@shared_task\ndef send_expiry_alerts():",
        "detail": "user.tasks",
        "documentation": {}
    },
    {
        "label": "send_expiry_alerts",
        "kind": 2,
        "importPath": "user.tasks",
        "description": "user.tasks",
        "peekOfCode": "def send_expiry_alerts():\n    logger.info(\"Sending expiry alerts...\")\n    today = date.today()\n    tomorrow = today + timedelta(days=1)\n    # Retrieve users whose certificates are expiring today and tomorrow\n    users_expiring_today = User.objects.filter(expiry_date=today)\n    users_expiring_tomorrow = User.objects.filter(expiry_date=tomorrow)\n    # Loop through users expiring today\n    for user in users_expiring_today:\n        if user.email:",
        "detail": "user.tasks",
        "documentation": {}
    },
    {
        "label": "schedule_expiry_alerts",
        "kind": 2,
        "importPath": "user.tasks",
        "description": "user.tasks",
        "peekOfCode": "def schedule_expiry_alerts():\n    # Create or get the Crontab schedule (runs daily at 11:43 AM)\n    task_name = 'Send Pollution Certificate Expiry Alerts'\n    # Get or create the periodic task\n    task, created = PeriodicTask.objects.get_or_create(\n        crontab=schedule,\n        name=task_name,\n        task='user.tasks.send_expiry_alerts',\n        defaults={\n            'kwargs': json.dumps({})  # Pass any arguments if needed",
        "detail": "user.tasks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "user.tasks",
        "description": "user.tasks",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@shared_task\ndef deactivate_expired_users():\n    today = timezone.now().date()\n    users_to_deactivate = User.objects.filter(expiry_date__lt=today, is_active=True)\n    for user in users_to_deactivate:\n        user.is_active = False\n        user.save()\n        print(f\"Deactivated user: {user.email}\")\n    return f\"{len(users_to_deactivate)} users deactivated.\"",
        "detail": "user.tasks",
        "documentation": {}
    },
    {
        "label": "haversine",
        "kind": 2,
        "importPath": "user.utils",
        "description": "user.utils",
        "peekOfCode": "def haversine(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the great-circle distance between two points on Earth.\n    Input: Latitude and Longitude of both points in decimal degrees.\n    Output: Distance in kilometers.\n    \"\"\"\n    R = 6371  # Earth radius in km\n    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1",
        "detail": "user.utils",
        "documentation": {}
    },
    {
        "label": "get_region_from_coordinates",
        "kind": 2,
        "importPath": "user.utils",
        "description": "user.utils",
        "peekOfCode": "def get_region_from_coordinates(latitude, longitude):\n    \"\"\"\n    Determine region (North/South, East/West) based on the latitude and longitude.\n    \"\"\"\n    if latitude >= 0:\n        if longitude >= 0:\n            return \"North-East\"\n        else:\n            return \"North-West\"\n    else:",
        "detail": "user.utils",
        "documentation": {}
    },
    {
        "label": "get_address_from_coordinates",
        "kind": 2,
        "importPath": "user.utils",
        "description": "user.utils",
        "peekOfCode": "def get_address_from_coordinates(latitude, longitude):\n    \"\"\"\n    Fetches address details and region based on latitude and longitude using OpenCage Geocoder.\n    \"\"\"\n    api_key = 'cd14ce25b911440c9acf8d8ed78a61ef'\n    url = f\"https://api.opencagedata.com/geocode/v1/json?q={latitude}+{longitude}&key={api_key}\"\n    try:\n        response = requests.get(url)\n        if response.status_code == 200:\n            data = response.json()",
        "detail": "user.utils",
        "documentation": {}
    },
    {
        "label": "get_full_address_and_region",
        "kind": 2,
        "importPath": "user.utils",
        "description": "user.utils",
        "peekOfCode": "def get_full_address_and_region(latitude, longitude):\n    \"\"\"\n    Fetches the full address and region from latitude and longitude.\n    \"\"\"\n    api_key = 'cd14ce25b911440c9acf8d8ed78a61ef'\n    url = f\"https://api.opencagedata.com/geocode/v1/json?q={latitude}+{longitude}&key={api_key}\"\n    try:\n        response = requests.get(url)\n        if response.status_code == 200:\n            data = response.json()",
        "detail": "user.utils",
        "documentation": {}
    },
    {
        "label": "determine_region",
        "kind": 2,
        "importPath": "user.utils",
        "description": "user.utils",
        "peekOfCode": "def determine_region(latitude, longitude):\n    \"\"\"\n    Determines the region based on latitude and longitude.\n    \"\"\"\n    if latitude >= 0:\n        return 'North' if longitude >= 0 else 'East'\n    else:\n        return 'South' if longitude >= 0 else 'West'",
        "detail": "user.utils",
        "documentation": {}
    },
    {
        "label": "CustomLoginView",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class CustomLoginView(LoginView):\n    authentication_form = EmailAuthenticationForm\n    template_name = 'login.html'  # Specify your template\n    redirect_authenticated_user = True  # Redirect if user is already logged in\n    # Where to redirect after successful login\n    success_url = reverse_lazy('home')\n    def get_success_url(self):  # checking for which type of user after login\n        user = self.request.user\n        if user.user_type != None and hasattr(user, 'user_type') and user.user_type.name.lower() == 'stakeholder':\n            return reverse_lazy('stakeholder')",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def register(request):\n    user_type_param = request.GET.get('user_type')\n    if request.method == 'POST':\n        form = CustomUserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save(commit=False)\n            print(user)\n            # Get the selected user type\n            user_type = UserType.objects.get(name=user_type_param.lower())\n            print(user_type)",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "admindash",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def admindash(request):\n    # Fetching the usertype with name 'Stakeholder'\n    stakeholder_user_type = UserType.objects.get(name='Stakeholder')\n    # Counting total stakeholders\n    total_stakeholders = User.objects.filter(\n        user_type=stakeholder_user_type).count()\n    # Counting active stakeholders\n    active_stakeholders = User.objects.filter(\n        user_type=stakeholder_user_type, is_active=True).count()\n    # Fetching the usertype with name 'Customer'",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "stakeholderuser",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def stakeholderuser(request):\n    # fetching the usertype with name stakeholder\n    user_type = UserType.objects.get(name='Stakeholder')\n    users = User.objects.filter(user_type=user_type)\n    context = {'users': users}\n    return render(request, 'stakeholderuser.html', context)\ndef stakeholderuserprofile(request, id):\n    user = User.objects.get(id=id)\n    farm=Farm.objects.filter(owner=user).first()\n    chick_batches = ChickBatch.objects.filter(user=user)",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "stakeholderuserprofile",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def stakeholderuserprofile(request, id):\n    user = User.objects.get(id=id)\n    farm=Farm.objects.filter(owner=user).first()\n    chick_batches = ChickBatch.objects.filter(user=user)\n    total_chick_count = chick_batches.aggregate(Sum('initial_chick_count'))[\n        'initial_chick_count__sum'] or 0\n    today = date.today()\n    day_expiry = None\n    if farm.expiry_date:\n        day_expiry = (user.expiry_date - today).days",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "view_stakeholder_view",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def view_stakeholder_view(request, id):\n    chick_batches = ChickBatch.objects.filter(\n        user_id=id)  # Adjust the queryset as needed\n    return render(request, 'chick_batches_list.html', {'chick_batches': chick_batches,\"user\":id})\ndef download_daily_log(request, batch_id):\n    try:\n        # Retrieve the DailyData records for the specific batch\n        batch = ChickBatch.objects.get(id=batch_id)\n        daily_data_records = DailyData.objects.filter(batch=batch)\n        # Create a DataFrame for the daily log",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "download_daily_log",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def download_daily_log(request, batch_id):\n    try:\n        # Retrieve the DailyData records for the specific batch\n        batch = ChickBatch.objects.get(id=batch_id)\n        daily_data_records = DailyData.objects.filter(batch=batch)\n        # Create a DataFrame for the daily log\n        data = {\n            'Date': [record.date for record in daily_data_records],\n            'Alive Count': [record.alive_count for record in daily_data_records],\n            'Sick Chicks': [record.sick_chicks for record in daily_data_records],",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "customeruser",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def customeruser(request):\n    # fetching the usertype with customer\n    user_type = UserType.objects.get(name='Customer')\n    # fetching all user that having user type as customer\n    users = User.objects.filter(user_type=user_type)\n    # context is using in html for rendering the data eg: user.name,user.email etc\n    context = {'users': users}\n    return render(request, 'customeruser.html', context)\ndef customeruserprofile(request, id):\n    user = User.objects.get(id=id)",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "customeruserprofile",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def customeruserprofile(request, id):\n    user = User.objects.get(id=id)\n    orders = Order.objects.filter(user=id)\n    return render(request, 'customerprofile.html', {'user': user, 'orders': orders})\n@login_required\ndef approve_order(request, order_id):\n    # Fetch the order and update its status\n    order = get_object_or_404(Order, id=order_id)\n    if request.method == 'POST':\n        # Check if the order can be fulfilled",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "approve_order",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def approve_order(request, order_id):\n    # Fetch the order and update its status\n    order = get_object_or_404(Order, id=order_id)\n    if request.method == 'POST':\n        # Check if the order can be fulfilled\n        if not order.can_fulfill_order():\n            messages.error(\n                request, \"Not enough chickens available to fulfill this order.\")\n            return redirect('customeruserprofile', id=order.user.id)\n        # Confirm the order",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "toggle_user_status",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def toggle_user_status(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    if request.method == \"POST\":\n        # Toggle the user's active status\n        user.is_active = not user.is_active\n        user.save()\n        status = \"enabled\" if user.is_active else \"disabled\"\n        messages.success(request, f\"User has been {status} successfully.\")\n        if user.user_type.name.lower() == \"customer\":\n            return redirect('customeruser')",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "vaccine_admin",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def vaccine_admin(request):\n    # Assuming you're trying to retrieve a VaccineAdmin object by its ID (pk)\n    return render(request, 'vaccination.html')\ndef feed_admin(request):\n    return render(request, 'feedadmin.html')\n# user/views.py\ndef renew_pollution_certificate(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    if request.method == 'POST':\n        new_expiry_date = request.POST.get('expiry_date')",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "feed_admin",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def feed_admin(request):\n    return render(request, 'feedadmin.html')\n# user/views.py\ndef renew_pollution_certificate(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    if request.method == 'POST':\n        new_expiry_date = request.POST.get('expiry_date')\n        if new_expiry_date:\n            user.expiry_date = new_expiry_date  # Update the expiry date\n            user.is_active = True  # Reactivate the user",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "renew_pollution_certificate",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def renew_pollution_certificate(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    if request.method == 'POST':\n        new_expiry_date = request.POST.get('expiry_date')\n        if new_expiry_date:\n            user.expiry_date = new_expiry_date  # Update the expiry date\n            user.is_active = True  # Reactivate the user\n            user.save()\n            messages.success(\n                request, \"Pollution certificate renewed successfully.\")",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "supplier_list",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def supplier_list(request):\n    \"\"\"Display the list of suppliers.\"\"\"\n    suppliers = Supplier.objects.all()\n    return render(request, 'supplier_list.html', {'suppliers': suppliers})\ndef add_supplier(request):\n    \"\"\"Add a new supplier.\"\"\"\n    if request.method == 'POST':\n        form = SupplierForm(request.POST)\n        if form.is_valid():\n            form.save()",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "add_supplier",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def add_supplier(request):\n    \"\"\"Add a new supplier.\"\"\"\n    if request.method == 'POST':\n        form = SupplierForm(request.POST)\n        if form.is_valid():\n            form.save()\n            # Success message\n            messages.success(request, 'Supplier added successfully.')\n            # Redirect to supplier list after adding\n            return redirect('supplier_list')",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "edit_supplier",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def edit_supplier(request, supplier_id):\n    \"\"\"Edit an existing supplier.\"\"\"\n    supplier = get_object_or_404(Supplier, id=supplier_id)\n    if request.method == 'POST':\n        form = SupplierForm(request.POST, instance=supplier)\n        if form.is_valid():\n            form.save()\n            # Redirect to supplier list after editing\n            return redirect('supplier_list')\n    else:",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "enable_supplier",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def enable_supplier(request, supplier_id):\n    \"\"\"Enable a supplier.\"\"\"\n    supplier = get_object_or_404(Supplier, id=supplier_id)\n    supplier.is_active = True\n    supplier.save()\n    # Redirect to supplier list after enabling\n    return redirect('supplier_list')\ndef disable_supplier(request, supplier_id):\n    \"\"\"Disable a supplier.\"\"\"\n    supplier = get_object_or_404(Supplier, id=supplier_id)",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "disable_supplier",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def disable_supplier(request, supplier_id):\n    \"\"\"Disable a supplier.\"\"\"\n    supplier = get_object_or_404(Supplier, id=supplier_id)\n    supplier.is_active = False\n    supplier.save()\n    # Redirect to supplier list after disabling\n    return redirect('supplier_list')\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom .models import Vaccine\nfrom .forms import VaccineForm",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "manage_vaccines",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def manage_vaccines(request):\n    return render(request, 'manage_vaccines.html')\n# View to add a new vaccine\nfrom django.http import JsonResponse\nfrom django.shortcuts import render\nfrom .forms import VaccineForm\ndef add_vaccine(request):\n    if request.method == 'POST':\n        form = VaccineForm(request.POST)\n        if form.is_valid():",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "add_vaccine",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def add_vaccine(request):\n    if request.method == 'POST':\n        form = VaccineForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return JsonResponse({'success': True, 'message': 'Vaccine added successfully'})\n        else:\n            return JsonResponse({'success': False, 'message': 'Form is invalid', 'errors': form.errors})\n    return JsonResponse({'success': False, 'message': 'Invalid request method'})\n# View to edit an existing vaccine",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "edit_vaccine",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def edit_vaccine(request, vaccine_id):\n    vaccine = get_object_or_404(Vaccine, id=vaccine_id)\n    if request.method == 'POST':\n        form = VaccineForm(request.POST, instance=vaccine)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Vaccine updated successfully!\")\n            return redirect('vaccine_dashboard')\n    else:\n        form = VaccineForm(instance=vaccine)",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "delete_vaccine",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def delete_vaccine(request, vaccine_id):\n    # Get the vaccine object by ID\n    vaccine = get_object_or_404(Vaccine, id=vaccine_id)\n    # Delete the vaccine\n    vaccine.delete()\n    # Return a JSON response indicating success\n    return JsonResponse({'success': True, 'message': 'Vaccine deleted successfully'})\ndef vaccine_dashboard(request):\n    vaccines = Vaccine.objects.all()\n    return render(request, 'vaccine_dashboard.html', {'vaccines': vaccines})",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "vaccine_dashboard",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def vaccine_dashboard(request):\n    vaccines = Vaccine.objects.all()\n    return render(request, 'vaccine_dashboard.html', {'vaccines': vaccines})\ndef manage_records(request):\n    records = VaccinationRecord.objects.all()\n    return render(request, 'manage_records.html', {'records': records})\ndef add_record(request):\n    if request.method == 'POST':\n        form = VaccinationRecordForm(request.POST)\n        if form.is_valid():",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "manage_records",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def manage_records(request):\n    records = VaccinationRecord.objects.all()\n    return render(request, 'manage_records.html', {'records': records})\ndef add_record(request):\n    if request.method == 'POST':\n        form = VaccinationRecordForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('manage_records')\n    else:",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "add_record",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def add_record(request):\n    if request.method == 'POST':\n        form = VaccinationRecordForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('manage_records')\n    else:\n        form = VaccinationRecordForm()\n    return render(request, 'add_record.html', {'form': form})\nfrom django.http import JsonResponse",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "assign_vaccine",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def assign_vaccine(request):\n    \"\"\"\n    Renders the vaccine assignment form and handles the form submission.\n    \"\"\"\n    if request.method == 'POST':\n        try:\n            # Retrieve POST data\n            user_id = request.POST.get('user')\n            batch_id = request.POST.get('batch')\n            vaccine_id = request.POST.get('vaccine')",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "get_active_batches",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def get_active_batches(request, user_id):\n    \"\"\"\n    Returns active batches for a given stakeholder user.\n    \"\"\"\n    try:\n        # Check if the user is a stakeholder\n        stakeholder = get_object_or_404(User, id=user_id, user_type='stakeholder')\n        # Get active batches for the stakeholder\n        active_batches = ChickBatch.objects.filter(user=stakeholder, batch_status='active')\n        # Prepare the batch data for the response",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "waste_management_admin",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def waste_management_admin(request):\n    # Get statistics for the dashboard\n    resources = WasteManagementResource.objects.all()\n    daily_tips = DailyTip.objects.all()\n    context = {\n        'total_resources': resources.count(),\n        'active_resources': resources.filter(is_active=True).count(),\n        'total_tips': daily_tips.count(),\n        'active_tips': daily_tips.filter(is_active=True).count(),\n        'resources': resources.order_by('-created_at')[:5],  # Latest 5 resources",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "add_resource",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def add_resource(request):\n    if request.method == 'POST':\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        resource_type = request.POST.get('resource_type')\n        file = request.FILES.get('file')\n        WasteManagementResource.objects.create(\n            title=title,\n            description=description,\n            resource_type=resource_type,",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "add_tip",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def add_tip(request):\n    if request.method == 'POST':\n        title = request.POST.get('title')\n        content = request.POST.get('content')\n        category = request.POST.get('category')\n        DailyTip.objects.create(\n            title=title,\n            content=content,\n            category=category,\n            is_active=True",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "view_resources",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def view_resources(request):\n    resources = WasteManagementResource.objects.all().order_by('-created_at')\n    return render(request, 'waste_management.html', {'resources': resources, 'section': 'resources'})\ndef view_tips(request):\n    tips = DailyTip.objects.all().order_by('-created_at')\n    return render(request, 'waste_management.html', {'tips': tips, 'section': 'tips'})",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "view_tips",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def view_tips(request):\n    tips = DailyTip.objects.all().order_by('-created_at')\n    return render(request, 'waste_management.html', {'tips': tips, 'section': 'tips'})",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'FeatherFarmSoloutions.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "settings",
        "description": "settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n# Media files configuration\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "settings",
        "description": "settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n# Media files configuration\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "settings",
        "description": "settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "settings",
        "description": "settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "urls",
        "description": "urls",
        "peekOfCode": "urlpatterns = [\n    # ... your other URL patterns ...\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "urls",
        "documentation": {}
    }
]