[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "shared_task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "crontab",
        "importPath": "celery.schedules",
        "description": "celery.schedules",
        "isExtraImport": true,
        "detail": "celery.schedules",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "os",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "dj_database_url",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dj_database_url",
        "description": "dj_database_url",
        "detail": "dj_database_url",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "logout_view",
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "isExtraImport": true,
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "user.models",
        "description": "user.models",
        "isExtraImport": true,
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "user.models",
        "description": "user.models",
        "isExtraImport": true,
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "user.models",
        "description": "user.models",
        "isExtraImport": true,
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "user.models",
        "description": "user.models",
        "isExtraImport": true,
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "Supplier",
        "importPath": "user.models",
        "description": "user.models",
        "isExtraImport": true,
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "Supplier",
        "importPath": "user.models",
        "description": "user.models",
        "isExtraImport": true,
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "user.models",
        "description": "user.models",
        "isExtraImport": true,
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "user.models",
        "description": "user.models",
        "isExtraImport": true,
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ChickBatch",
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "isExtraImport": true,
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "ChickBatch",
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "isExtraImport": true,
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "ChickBatch",
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "isExtraImport": true,
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "DailyData",
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "isExtraImport": true,
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "ChickBatch",
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "isExtraImport": true,
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "ChickBatch",
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "isExtraImport": true,
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "DailyData",
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "isExtraImport": true,
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "ChickSupply",
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "isExtraImport": true,
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "hoteldetails.models",
        "description": "hoteldetails.models",
        "isExtraImport": true,
        "detail": "hoteldetails.models",
        "documentation": {}
    },
    {
        "label": "Cart",
        "importPath": "hoteldetails.models",
        "description": "hoteldetails.models",
        "isExtraImport": true,
        "detail": "hoteldetails.models",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "importPath": "hoteldetails.models",
        "description": "hoteldetails.models",
        "isExtraImport": true,
        "detail": "hoteldetails.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "hoteldetails.models",
        "description": "hoteldetails.models",
        "isExtraImport": true,
        "detail": "hoteldetails.models",
        "documentation": {}
    },
    {
        "label": "send_order_confirmation_email",
        "importPath": "hoteldetails.utility",
        "description": "hoteldetails.utility",
        "isExtraImport": true,
        "detail": "hoteldetails.utility",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "twilio.rest",
        "description": "twilio.rest",
        "isExtraImport": true,
        "detail": "twilio.rest",
        "documentation": {}
    },
    {
        "label": "approve_order",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "download_daily_log",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "register",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "CustomLoginView",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "admindash",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "stakeholderuser",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "customeruser",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "stakeholderuserprofile",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "customeruserprofile",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "stakeholder_registration",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "vaccine_admin",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "feed_admin",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "renew_pollution_certificate",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "supplier_list",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "add_supplier",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "enable_supplier",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "disable_supplier",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "edit_supplier",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "toggle_user_status",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "view_stakeholder_view",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "OWM",
        "importPath": "pyowm",
        "description": "pyowm",
        "isExtraImport": true,
        "detail": "pyowm",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ModelBackend",
        "importPath": "django.contrib.auth.backends",
        "description": "django.contrib.auth.backends",
        "isExtraImport": true,
        "detail": "django.contrib.auth.backends",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "SetPasswordForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "PeriodicTask",
        "importPath": "django_celery_beat.models",
        "description": "django_celery_beat.models",
        "isExtraImport": true,
        "detail": "django_celery_beat.models",
        "documentation": {}
    },
    {
        "label": "CrontabSchedule",
        "importPath": "django_celery_beat.models",
        "description": "django_celery_beat.models",
        "isExtraImport": true,
        "detail": "django_celery_beat.models",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "openpyxl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openpyxl",
        "description": "openpyxl",
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.asgi",
        "description": "FeatherFarmSoloutions.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "FeatherFarmSoloutions.asgi",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.celery",
        "description": "FeatherFarmSoloutions.celery",
        "peekOfCode": "app = Celery('FeatherFarmSoloutions')\n# Using a string here means the worker doesn't need to serialize\n# the configuration object to child processes.\n# namespace='CELERY' means all celery-related config keys should have a `CELERY_` prefix.\napp.config_from_object('django.conf:settings', namespace='CELERY')\n# Load task modules from all registered Django app configs.\n# app.autodiscover_tasks()\napp.autodiscover_tasks(['user'])",
        "detail": "FeatherFarmSoloutions.celery",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-any&$e=8_%j$4u1aw@%b_uo!+0x(88%aj0h!1&m4pqic(cjv(l'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# ALLOWED_HOSTS = ['*']\n# Application definition",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-any&$e=8_%j$4u1aw@%b_uo!+0x(88%aj0h!1&m4pqic(cjv(l'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django.contrib.sites',\n    'stakeholder.apps.StakeholderConfig',\n    'user',",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = 'bootstrap5'\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'allauth.account.middleware.AccountMiddleware',",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'allauth.account.middleware.AccountMiddleware',\n    # 'whitenoise.middleware.WhitenoiseMiddleware',",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "ROOT_URLCONF = 'FeatherFarmSoloutions.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "WSGI_APPLICATION = 'FeatherFarmSoloutions.wsgi.application'\n#dpg-csl5vh56l47c73e6h07g-a\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\n# DATABASES = {\n#     'default': {\n#         'ENGINE': 'django.db.backends.mysql',\n#         'NAME': 'featherfarm',\n#         'USER': 'root',\n#         'PASSWORD': '',",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "SECURE_REFERRER_POLICY",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "SECURE_REFERRER_POLICY = \"strict-origin-when-cross-origin\"\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'Asia/Kolkata'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n    BASE_DIR/\"static\"",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "TIME_ZONE = 'Asia/Kolkata'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n    BASE_DIR/\"static\"\n]",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n    BASE_DIR/\"static\"\n]\n# Default primary key field type",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n    BASE_DIR/\"static\"\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n    BASE_DIR/\"static\"\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media/')\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n    BASE_DIR/\"static\"\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media/')\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    BASE_DIR/\"static\"\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media/')\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media/')\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'nimyathomas3@gmail.com'\nEMAIL_HOST_PASSWORD = 'isfa lred wfxt ujws'\nAUTHENTICATION_BACKENDS = (",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'nimyathomas3@gmail.com'\nEMAIL_HOST_PASSWORD = 'isfa lred wfxt ujws'\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'nimyathomas3@gmail.com'\nEMAIL_HOST_PASSWORD = 'isfa lred wfxt ujws'\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'user.backends.EmailBackend',",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'nimyathomas3@gmail.com'\nEMAIL_HOST_PASSWORD = 'isfa lred wfxt ujws'\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'user.backends.EmailBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "EMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'nimyathomas3@gmail.com'\nEMAIL_HOST_PASSWORD = 'isfa lred wfxt ujws'\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'user.backends.EmailBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',\n)",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "EMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'nimyathomas3@gmail.com'\nEMAIL_HOST_PASSWORD = 'isfa lred wfxt ujws'\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'user.backends.EmailBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',\n)\nACCOUNT_AUTHENTICATION_METHOD = 'email'",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'nimyathomas3@gmail.com'\nEMAIL_HOST_PASSWORD = 'isfa lred wfxt ujws'\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'user.backends.EmailBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',\n)\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_REQUIRED = True",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "EMAIL_HOST_USER = 'nimyathomas3@gmail.com'\nEMAIL_HOST_PASSWORD = 'isfa lred wfxt ujws'\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'user.backends.EmailBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',\n)\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = 'isfa lred wfxt ujws'\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'user.backends.EmailBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',\n)\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False\nACCOUNT_USER_MODEL_USERNAME_FIELD = None",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'user.backends.EmailBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',\n)\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False\nACCOUNT_USER_MODEL_USERNAME_FIELD = None\nACCOUNT_EMAIL_VERIFICATION = 'optional'",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_AUTHENTICATION_METHOD",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "ACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False\nACCOUNT_USER_MODEL_USERNAME_FIELD = None\nACCOUNT_EMAIL_VERIFICATION = 'optional'\nACCOUNT_UNIQUE_EMAIL = True\nCLIENT_ID = \"993464726518-dlvqdjptpid7jmdsubuivfhe36ncc0at.apps.googleusercontent.com\"\npart1 = \"GOCSPX\"\npart2 = \"ahmTIfCelacuDxLKeiZ5JiX\"\npart3 = \"Y1rx\"",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_REQUIRED",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "ACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False\nACCOUNT_USER_MODEL_USERNAME_FIELD = None\nACCOUNT_EMAIL_VERIFICATION = 'optional'\nACCOUNT_UNIQUE_EMAIL = True\nCLIENT_ID = \"993464726518-dlvqdjptpid7jmdsubuivfhe36ncc0at.apps.googleusercontent.com\"\npart1 = \"GOCSPX\"\npart2 = \"ahmTIfCelacuDxLKeiZ5JiX\"\npart3 = \"Y1rx\"\nmy_string = f\"{part1}-{part2}-{part3}\"",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_USERNAME_REQUIRED",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "ACCOUNT_USERNAME_REQUIRED = False\nACCOUNT_USER_MODEL_USERNAME_FIELD = None\nACCOUNT_EMAIL_VERIFICATION = 'optional'\nACCOUNT_UNIQUE_EMAIL = True\nCLIENT_ID = \"993464726518-dlvqdjptpid7jmdsubuivfhe36ncc0at.apps.googleusercontent.com\"\npart1 = \"GOCSPX\"\npart2 = \"ahmTIfCelacuDxLKeiZ5JiX\"\npart3 = \"Y1rx\"\nmy_string = f\"{part1}-{part2}-{part3}\"\nSOCIALACCOUNT_PROVIDERS = {",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_USER_MODEL_USERNAME_FIELD",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "ACCOUNT_USER_MODEL_USERNAME_FIELD = None\nACCOUNT_EMAIL_VERIFICATION = 'optional'\nACCOUNT_UNIQUE_EMAIL = True\nCLIENT_ID = \"993464726518-dlvqdjptpid7jmdsubuivfhe36ncc0at.apps.googleusercontent.com\"\npart1 = \"GOCSPX\"\npart2 = \"ahmTIfCelacuDxLKeiZ5JiX\"\npart3 = \"Y1rx\"\nmy_string = f\"{part1}-{part2}-{part3}\"\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_VERIFICATION",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "ACCOUNT_EMAIL_VERIFICATION = 'optional'\nACCOUNT_UNIQUE_EMAIL = True\nCLIENT_ID = \"993464726518-dlvqdjptpid7jmdsubuivfhe36ncc0at.apps.googleusercontent.com\"\npart1 = \"GOCSPX\"\npart2 = \"ahmTIfCelacuDxLKeiZ5JiX\"\npart3 = \"Y1rx\"\nmy_string = f\"{part1}-{part2}-{part3}\"\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'SCOPE': [",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_UNIQUE_EMAIL",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "ACCOUNT_UNIQUE_EMAIL = True\nCLIENT_ID = \"993464726518-dlvqdjptpid7jmdsubuivfhe36ncc0at.apps.googleusercontent.com\"\npart1 = \"GOCSPX\"\npart2 = \"ahmTIfCelacuDxLKeiZ5JiX\"\npart3 = \"Y1rx\"\nmy_string = f\"{part1}-{part2}-{part3}\"\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'SCOPE': [\n            'profile',",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "CLIENT_ID = \"993464726518-dlvqdjptpid7jmdsubuivfhe36ncc0at.apps.googleusercontent.com\"\npart1 = \"GOCSPX\"\npart2 = \"ahmTIfCelacuDxLKeiZ5JiX\"\npart3 = \"Y1rx\"\nmy_string = f\"{part1}-{part2}-{part3}\"\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'SCOPE': [\n            'profile',\n            'email',",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "part1",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "part1 = \"GOCSPX\"\npart2 = \"ahmTIfCelacuDxLKeiZ5JiX\"\npart3 = \"Y1rx\"\nmy_string = f\"{part1}-{part2}-{part3}\"\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'SCOPE': [\n            'profile',\n            'email',\n        ],",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "part2",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "part2 = \"ahmTIfCelacuDxLKeiZ5JiX\"\npart3 = \"Y1rx\"\nmy_string = f\"{part1}-{part2}-{part3}\"\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'SCOPE': [\n            'profile',\n            'email',\n        ],\n        'AUTH_PARAMS': {",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "part3",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "part3 = \"Y1rx\"\nmy_string = f\"{part1}-{part2}-{part3}\"\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'SCOPE': [\n            'profile',\n            'email',\n        ],\n        'AUTH_PARAMS': {\n            'access_type': 'online',",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "my_string",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "my_string = f\"{part1}-{part2}-{part3}\"\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'SCOPE': [\n            'profile',\n            'email',\n        ],\n        'AUTH_PARAMS': {\n            'access_type': 'online',\n            'prompt': 'select_account',",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "SOCIALACCOUNT_PROVIDERS",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "SOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'SCOPE': [\n            'profile',\n            'email',\n        ],\n        'AUTH_PARAMS': {\n            'access_type': 'online',\n            'prompt': 'select_account',\n        },",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "SITE_ID",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "SITE_ID = 2\nLOGIN_REDIRECT_URL = '/login/'\nLOGOUT_REDIRECT_URL = '/'\nAUTH_USER_MODEL = 'user.User'\n# settings.py\nCELERY_BROKER_URL = 'redis://localhost:6379/0'  # Redis URL\nCELERY_RESULT_BACKEND = 'redis://localhost:6379/0'\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_RESULT_SERIALIZER = 'json'",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = '/login/'\nLOGOUT_REDIRECT_URL = '/'\nAUTH_USER_MODEL = 'user.User'\n# settings.py\nCELERY_BROKER_URL = 'redis://localhost:6379/0'  # Redis URL\nCELERY_RESULT_BACKEND = 'redis://localhost:6379/0'\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'Asia/Kolkata'  # Use your timezone",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "LOGOUT_REDIRECT_URL = '/'\nAUTH_USER_MODEL = 'user.User'\n# settings.py\nCELERY_BROKER_URL = 'redis://localhost:6379/0'  # Redis URL\nCELERY_RESULT_BACKEND = 'redis://localhost:6379/0'\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'Asia/Kolkata'  # Use your timezone\n# settings.py",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'user.User'\n# settings.py\nCELERY_BROKER_URL = 'redis://localhost:6379/0'  # Redis URL\nCELERY_RESULT_BACKEND = 'redis://localhost:6379/0'\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'Asia/Kolkata'  # Use your timezone\n# settings.py\nCELERY_BEAT_SCHEDULE = {",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_BROKER_URL",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Redis URL\nCELERY_RESULT_BACKEND = 'redis://localhost:6379/0'\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'Asia/Kolkata'  # Use your timezone\n# settings.py\nCELERY_BEAT_SCHEDULE = {\n    'send-expiry-alerts': {\n        'task': 'user.tasks.send_expiry_alerts',",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_BACKEND",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'Asia/Kolkata'  # Use your timezone\n# settings.py\nCELERY_BEAT_SCHEDULE = {\n    'send-expiry-alerts': {\n        'task': 'user.tasks.send_expiry_alerts',\n        'schedule': crontab(hour=23, minute=7),  # Daily at 3:03 PM",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_SERIALIZER",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "CELERY_TASK_SERIALIZER = 'json'\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'Asia/Kolkata'  # Use your timezone\n# settings.py\nCELERY_BEAT_SCHEDULE = {\n    'send-expiry-alerts': {\n        'task': 'user.tasks.send_expiry_alerts',\n        'schedule': crontab(hour=23, minute=7),  # Daily at 3:03 PM\n    },",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_ACCEPT_CONTENT",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "CELERY_ACCEPT_CONTENT = ['json']\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'Asia/Kolkata'  # Use your timezone\n# settings.py\nCELERY_BEAT_SCHEDULE = {\n    'send-expiry-alerts': {\n        'task': 'user.tasks.send_expiry_alerts',\n        'schedule': crontab(hour=23, minute=7),  # Daily at 3:03 PM\n    },\n    'deactivate-expired-users-every-day': {",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_SERIALIZER",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "CELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'Asia/Kolkata'  # Use your timezone\n# settings.py\nCELERY_BEAT_SCHEDULE = {\n    'send-expiry-alerts': {\n        'task': 'user.tasks.send_expiry_alerts',\n        'schedule': crontab(hour=23, minute=7),  # Daily at 3:03 PM\n    },\n    'deactivate-expired-users-every-day': {\n        'task': 'user.tasks.deactivate_expired_users',",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_TIMEZONE",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "CELERY_TIMEZONE = 'Asia/Kolkata'  # Use your timezone\n# settings.py\nCELERY_BEAT_SCHEDULE = {\n    'send-expiry-alerts': {\n        'task': 'user.tasks.send_expiry_alerts',\n        'schedule': crontab(hour=23, minute=7),  # Daily at 3:03 PM\n    },\n    'deactivate-expired-users-every-day': {\n        'task': 'user.tasks.deactivate_expired_users',\n        'schedule': 86400.0,  # Run once every 24 hours (86400 seconds)",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_BEAT_SCHEDULE",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.settings",
        "description": "FeatherFarmSoloutions.settings",
        "peekOfCode": "CELERY_BEAT_SCHEDULE = {\n    'send-expiry-alerts': {\n        'task': 'user.tasks.send_expiry_alerts',\n        'schedule': crontab(hour=23, minute=7),  # Daily at 3:03 PM\n    },\n    'deactivate-expired-users-every-day': {\n        'task': 'user.tasks.deactivate_expired_users',\n        'schedule': 86400.0,  # Run once every 24 hours (86400 seconds)\n    },\n}",
        "detail": "FeatherFarmSoloutions.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.urls",
        "description": "FeatherFarmSoloutions.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('stakeholder.urls')),\n    path('hotel/', include('hoteldetails.urls')),\n    path('accounts/', include('allauth.urls')),\n    path('logout/', logout_view, name='logout'),\n    path('password_reset/', auth_views.PasswordResetView.as_view(),\n         name='password_reset'),\n    path('password_reset/done/', auth_views.PasswordResetDoneView.as_view(),\n         name='password_reset_done'),",
        "detail": "FeatherFarmSoloutions.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "FeatherFarmSoloutions.wsgi",
        "description": "FeatherFarmSoloutions.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "FeatherFarmSoloutions.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "hoteldetails.migrations.0001_initial",
        "description": "hoteldetails.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('stakeholder', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Cart',\n            fields=[",
        "detail": "hoteldetails.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "hoteldetails.migrations.0002_order_delivery_fee_order_delivery_option",
        "description": "hoteldetails.migrations.0002_order_delivery_fee_order_delivery_option",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('hoteldetails', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='order',\n            name='delivery_fee',\n            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Fee based on delivery option', max_digits=6),\n        ),",
        "detail": "hoteldetails.migrations.0002_order_delivery_fee_order_delivery_option",
        "documentation": {}
    },
    {
        "label": "HoteldetailsConfig",
        "kind": 6,
        "importPath": "hoteldetails.apps",
        "description": "hoteldetails.apps",
        "peekOfCode": "class HoteldetailsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'hoteldetails'",
        "detail": "hoteldetails.apps",
        "documentation": {}
    },
    {
        "label": "CustomerUserForm",
        "kind": 6,
        "importPath": "hoteldetails.forms",
        "description": "hoteldetails.forms",
        "peekOfCode": "class CustomerUserForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields = ['email', 'name', 'phone_number', 'address','hotel_license']\nclass OrderForm(forms.Form):\n    one_kg_count = forms.IntegerField(min_value=0, required=False, label=\"1 kg chickens\", initial=0)\n    two_kg_count = forms.IntegerField(min_value=0, required=False, label=\"2 kg chickens\", initial=0)\n    three_kg_count = forms.IntegerField(min_value=0, required=False, label=\"3 kg chickens\", initial=0)",
        "detail": "hoteldetails.forms",
        "documentation": {}
    },
    {
        "label": "OrderForm",
        "kind": 6,
        "importPath": "hoteldetails.forms",
        "description": "hoteldetails.forms",
        "peekOfCode": "class OrderForm(forms.Form):\n    one_kg_count = forms.IntegerField(min_value=0, required=False, label=\"1 kg chickens\", initial=0)\n    two_kg_count = forms.IntegerField(min_value=0, required=False, label=\"2 kg chickens\", initial=0)\n    three_kg_count = forms.IntegerField(min_value=0, required=False, label=\"3 kg chickens\", initial=0)",
        "detail": "hoteldetails.forms",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "hoteldetails.models",
        "description": "hoteldetails.models",
        "peekOfCode": "class Order(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    batch = models.ForeignKey(ChickBatch, on_delete=models.CASCADE)\n    # Quantities ordered by the hotel for different weights\n    one_kg_count = models.IntegerField(\n        default=0, help_text=\"Number of 1 kg chickens ordered\")\n    two_kg_count = models.IntegerField(\n        default=0, help_text=\"Number of 2 kg chickens ordered\")\n    three_kg_count = models.IntegerField(\n        default=0, help_text=\"Number of 3 kg chickens ordered\")",
        "detail": "hoteldetails.models",
        "documentation": {}
    },
    {
        "label": "Cart",
        "kind": 6,
        "importPath": "hoteldetails.models",
        "description": "hoteldetails.models",
        "peekOfCode": "class Cart(models.Model):\n    user = models.ForeignKey(\n        User, on_delete=models.CASCADE, related_name='cart')\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"cart of {self.user.name}\"\nclass CartItem(models.Model):\n    ITEM_TYPE_CHOICES = [\n        ('live', 'Live'),\n        ('processed', 'Processed')",
        "detail": "hoteldetails.models",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "kind": 6,
        "importPath": "hoteldetails.models",
        "description": "hoteldetails.models",
        "peekOfCode": "class CartItem(models.Model):\n    ITEM_TYPE_CHOICES = [\n        ('live', 'Live'),\n        ('processed', 'Processed')\n    ]\n    cart = models.ForeignKey(\n        Cart, on_delete=models.CASCADE, related_name='items')\n    chick_batch = models.ForeignKey(ChickBatch, on_delete=models.CASCADE)\n    # New fields for weight categories\n    one_kg_count = models.IntegerField(",
        "detail": "hoteldetails.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "hoteldetails.models",
        "description": "hoteldetails.models",
        "peekOfCode": "User = get_user_model()\nclass Order(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    batch = models.ForeignKey(ChickBatch, on_delete=models.CASCADE)\n    # Quantities ordered by the hotel for different weights\n    one_kg_count = models.IntegerField(\n        default=0, help_text=\"Number of 1 kg chickens ordered\")\n    two_kg_count = models.IntegerField(\n        default=0, help_text=\"Number of 2 kg chickens ordered\")\n    three_kg_count = models.IntegerField(",
        "detail": "hoteldetails.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "hoteldetails.urls",
        "description": "hoteldetails.urls",
        "peekOfCode": "urlpatterns = [\n    path('', hoteldashboard, name=\"hoteldashboard\"),\n    path('view_profile/<int:id>', view_profile, name=\"view_profile\"),\n    path('view_orders', view_orders, name=\"view_orders\"),\n    path('view_farm/<int:farm_id>', view_farm, name='view_farm'),\n    path('cart_view', cart_view, name=\"cart_view\"),\n    path('checkout_view', checkout_view, name=\"checkout_view\"),\n    path('update_cart', update_cart, name=\"update_cart\"),\n]",
        "detail": "hoteldetails.urls",
        "documentation": {}
    },
    {
        "label": "send_order_confirmation_email",
        "kind": 2,
        "importPath": "hoteldetails.utility",
        "description": "hoteldetails.utility",
        "peekOfCode": "def send_order_confirmation_email(email, order):\n    \"\"\"\n    Send an order confirmation email to the user after placing an order.\n    \"\"\"\n    subject = \"Order Confirmation - Your order has been placed!\"\n    message = f\"Hello {order.user.full_name},\\n\\nThank you for your order!\\n\\n\" \\\n              f\"Order Details:\\n\" \\\n              f\"Order ID: {order.id}\\n\" \\\n              f\"Total Price: ${order.price}\\n\" \\\n              f\"Delivery Date: {order.delivery_date}\\n\" \\",
        "detail": "hoteldetails.utility",
        "documentation": {}
    },
    {
        "label": "hoteldashboard",
        "kind": 2,
        "importPath": "hoteldetails.views",
        "description": "hoteldetails.views",
        "peekOfCode": "def hoteldashboard(request):\n    # fetching the search data from html search box\n    # fetching the search data from html search box\n    query = request.GET.get('q')\n    batch_type = request.GET.get('batch_type')\n    user_type = UserType.objects.get(name='Stakeholder')\n    users = User.objects.filter(user_type=user_type)\n    if query:\n        # Filter items based on title or description matching the query\n        users = users.filter(",
        "detail": "hoteldetails.views",
        "documentation": {}
    },
    {
        "label": "view_profile",
        "kind": 2,
        "importPath": "hoteldetails.views",
        "description": "hoteldetails.views",
        "peekOfCode": "def view_profile(request, id):\n    user = get_object_or_404(User, id=id)\n    if request.method == 'POST':\n        form = CustomerUserForm(request.POST,request.FILES, instance=user)\n        print(form.errors)\n        if form.is_valid():\n            print(form.is_valid())\n            form.save()\n            return redirect('hoteldashboard')\n    else:",
        "detail": "hoteldetails.views",
        "documentation": {}
    },
    {
        "label": "view_farm",
        "kind": 2,
        "importPath": "hoteldetails.views",
        "description": "hoteldetails.views",
        "peekOfCode": "def view_farm(request, farm_id):\n    farm = get_object_or_404(User, id=farm_id)\n    batches = farm.chick_batches.filter(\n        batch_status='completed')  # Only show completed batches\n    order_form = OrderForm()\n    if request.method == 'POST':\n        form = OrderForm(request.POST)\n        batch_id = request.POST.get('batch_id')\n        batch = get_object_or_404(ChickBatch, id=batch_id)\n        if form.is_valid():",
        "detail": "hoteldetails.views",
        "documentation": {}
    },
    {
        "label": "cart_view",
        "kind": 2,
        "importPath": "hoteldetails.views",
        "description": "hoteldetails.views",
        "peekOfCode": "def cart_view(request):\n    try:\n        cart = Cart.objects.get(user=request.user)\n    except Cart.DoesNotExist:\n        cart = None\n    cartitems = CartItem.objects.filter(cart=cart)\n    total_price = sum(item.total_price() for item in cartitems)\n    total_discounted = sum(item.discounted_price for item in cartitems)\n    is_empty = len(cartitems) == 0\n    return render(request, 'hoteldetials/view_cart.html', {\"cart\": cart, \"items\": cartitems, \"total_price\": total_price, \"total_dicounted_price\": total_discounted,\"is_empty\": is_empty })",
        "detail": "hoteldetails.views",
        "documentation": {}
    },
    {
        "label": "update_cart",
        "kind": 2,
        "importPath": "hoteldetails.views",
        "description": "hoteldetails.views",
        "peekOfCode": "def update_cart(request):\n    if request.method == 'POST':\n        # Get the current user's cart\n        cart = Cart.objects.filter(user=request.user).first()\n        if not cart:\n            # Handle case if no cart exists\n            return redirect('cart_view')\n        # Update each item based on form data\n        for item in cart.items.all():\n            # Update the type (live or processed)",
        "detail": "hoteldetails.views",
        "documentation": {}
    },
    {
        "label": "checkout_view",
        "kind": 2,
        "importPath": "hoteldetails.views",
        "description": "hoteldetails.views",
        "peekOfCode": "def checkout_view(request):\n    cart = Cart.objects.get(user=request.user)  # Get user's cart\n    items = cart.items.all()\n    # Check if the cart has items\n    if not items:\n        # Redirect or display a message if the cart is empty\n        return redirect('cart_view')  # Or display an error message\n    # Calculate the base total price\n    total_price = sum(item.discounted_price for item in items)\n    if request.method == \"POST\":",
        "detail": "hoteldetails.views",
        "documentation": {}
    },
    {
        "label": "view_orders",
        "kind": 2,
        "importPath": "hoteldetails.views",
        "description": "hoteldetails.views",
        "peekOfCode": "def view_orders(request):\n    orders = Order.objects.filter(user=request.user)\n    return render(request, 'hoteldetials/orderview.html', {'orders': orders})",
        "detail": "hoteldetails.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "management.commands.check_user_status",
        "description": "management.commands.check_user_status",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Check all users and deactivate if their pollution certificate has expired'\n    def handle(self, *args, **kwargs):\n        users = User.objects.all()\n        for user in users:\n            user.check_certificate_status()\n            self.stdout.write(f'Checked {user.email}, is_active: {user.is_active}')",
        "detail": "management.commands.check_user_status",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "stakeholder.migrations.0001_initial",
        "description": "stakeholder.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ChickBatch',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "stakeholder.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "stakeholder.migrations.0002_alter_chickbatch_batch_status",
        "description": "stakeholder.migrations.0002_alter_chickbatch_batch_status",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('stakeholder', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='chickbatch',\n            name='batch_status',\n            field=models.CharField(choices=[('active', 'Active'), ('completed', 'Completed')], default='active', help_text='Current status of the batch', max_length=10),\n        ),",
        "detail": "stakeholder.migrations.0002_alter_chickbatch_batch_status",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "stakeholder.migrations.0003_chicksupply",
        "description": "stakeholder.migrations.0003_chicksupply",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('stakeholder', '0002_alter_chickbatch_batch_status'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ChickSupply',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "stakeholder.migrations.0003_chicksupply",
        "documentation": {}
    },
    {
        "label": "SupplierAdmin",
        "kind": 6,
        "importPath": "stakeholder.admin",
        "description": "stakeholder.admin",
        "peekOfCode": "class SupplierAdmin(admin.ModelAdmin):\n    list_display = ('supplier_code', 'name', 'email', 'phone_number', 'is_active')  # Fields to display in the admin list\n    search_fields = ('supplier_code', 'name', 'email', 'phone_number')  # Enable search by these fields\n    list_filter = ('is_active',)  # Filter by active/inactive status\n    ordering = ('name',)  # Order by name (note the comma to make it a tuple)\n    actions = ['delete_selected']  # Enable bulk delete\n    def delete_model(self, request, obj):\n        # Custom behavior for single item delete (if needed)\n        obj.is_active = False  # Mark it as inactive instead of deleting\n        obj.save()",
        "detail": "stakeholder.admin",
        "documentation": {}
    },
    {
        "label": "StakeholderConfig",
        "kind": 6,
        "importPath": "stakeholder.apps",
        "description": "stakeholder.apps",
        "peekOfCode": "class StakeholderConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'stakeholder'",
        "detail": "stakeholder.apps",
        "documentation": {}
    },
    {
        "label": "DailyDataForm",
        "kind": 6,
        "importPath": "stakeholder.forms",
        "description": "stakeholder.forms",
        "peekOfCode": "class DailyDataForm(forms.ModelForm):\n    class Meta:\n        model = DailyData\n        fields = [\n            'date', 'alive_count', 'sick_chicks', 'weight_gain',\n            'feed_uplifted', 'water_consumption', 'temperature', 'mortality_count'\n        ]\n    def __init__(self, *args, **kwargs):\n        super(DailyDataForm, self).__init__(*args, **kwargs)\n        for field in self.fields.values():",
        "detail": "stakeholder.forms",
        "documentation": {}
    },
    {
        "label": "ChickenBatchForm",
        "kind": 6,
        "importPath": "stakeholder.forms",
        "description": "stakeholder.forms",
        "peekOfCode": "class ChickenBatchForm(forms.ModelForm):\n    class Meta:\n        model = ChickBatch\n        fields = [\"batch_status\",\"duration\"]\nclass CompletedBatchUpdateForm(forms.ModelForm):\n    \"\"\"Form for updating count of chickens in 1kg, 2kg, and 3kg categories.\"\"\"\n    class Meta:\n        model = ChickBatch\n        fields = ['one_kg_count', 'two_kg_count', 'three_kg_count']\n        widgets = {",
        "detail": "stakeholder.forms",
        "documentation": {}
    },
    {
        "label": "CompletedBatchUpdateForm",
        "kind": 6,
        "importPath": "stakeholder.forms",
        "description": "stakeholder.forms",
        "peekOfCode": "class CompletedBatchUpdateForm(forms.ModelForm):\n    \"\"\"Form for updating count of chickens in 1kg, 2kg, and 3kg categories.\"\"\"\n    class Meta:\n        model = ChickBatch\n        fields = ['one_kg_count', 'two_kg_count', 'three_kg_count']\n        widgets = {\n            'one_kg_count': forms.NumberInput(attrs={'min': 0, 'class': 'form-control', 'id': 'one-kg-count'}),\n            'two_kg_count': forms.NumberInput(attrs={'min': 0, 'class': 'form-control', 'id': 'two-kg-count'}),\n            'three_kg_count': forms.NumberInput(attrs={'min': 0, 'class': 'form-control', 'id': 'three-kg-count'})\n        }",
        "detail": "stakeholder.forms",
        "documentation": {}
    },
    {
        "label": "BatchSelectionForm",
        "kind": 6,
        "importPath": "stakeholder.forms",
        "description": "stakeholder.forms",
        "peekOfCode": "class BatchSelectionForm(forms.Form):\n    batch = forms.ModelChoiceField(\n        queryset=ChickBatch.objects.none(), label=\"Select Batch\")\n    def __init__(self, *args, **kwargs):\n        user = kwargs.pop('user')  # Get user from kwargs\n        super().__init__(*args, **kwargs)\n        self.fields['batch'].queryset = ChickBatch.objects.filter(\n            user=user)  # Filter\nclass DailyComparisonForm(forms.Form):\n    current_batch = forms.ModelChoiceField(",
        "detail": "stakeholder.forms",
        "documentation": {}
    },
    {
        "label": "DailyComparisonForm",
        "kind": 6,
        "importPath": "stakeholder.forms",
        "description": "stakeholder.forms",
        "peekOfCode": "class DailyComparisonForm(forms.Form):\n    current_batch = forms.ModelChoiceField(\n        queryset=ChickBatch.objects.none())  # Start with empty queryset\n    past_batch = forms.ModelChoiceField(queryset=ChickBatch.objects.none())\n    compare_day = forms.IntegerField(\n        min_value=1,\n        max_value=40,\n        error_messages={\n            'min_value': 'The compare day must be at least 1.',\n            'max_value': 'The compare day must be at most 40.',",
        "detail": "stakeholder.forms",
        "documentation": {}
    },
    {
        "label": "FeedMonitoringForm",
        "kind": 6,
        "importPath": "stakeholder.forms",
        "description": "stakeholder.forms",
        "peekOfCode": "class FeedMonitoringForm(forms.ModelForm):\n    class Meta:\n        model = FeedMonitoring\n        fields = ['batch', 'date', 'feed_consumed',\n                  'feed_wastage', 'feed_forecast']\n        widgets = {\n            # Use a date picker for the date field\n            'date': forms.DateInput(attrs={'type': 'date'}),\n            # Allow decimal input\n            'feed_consumed': forms.NumberInput(attrs={'step': '0.01'}),",
        "detail": "stakeholder.forms",
        "documentation": {}
    },
    {
        "label": "ChickBatch",
        "kind": 6,
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "peekOfCode": "class ChickBatch(models.Model):\n    STATUS_CHOICES = [\n        ('active', 'Active'),\n        ('completed', 'Completed')\n    ]\n    TYPE_CHOICES = [\n        ('broiler', 'Broiler'),\n        ('organic', 'Organic'),\n        ('kada', 'Kada')\n    ]",
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "DailyData",
        "kind": 6,
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "peekOfCode": "class DailyData(models.Model):\n    batch = models.ForeignKey(\n        ChickBatch, on_delete=models.CASCADE, related_name='daily_data')\n    owner = models.ForeignKey(\n        User, on_delete=models.CASCADE, related_name='daily_data_records')\n    date = models.DateField(default=timezone.now)  # Date for daily record\n    alive_count = models.IntegerField(\n        help_text=\"Number of chicks alive on this day\")\n    sick_chicks = models.IntegerField(\n        default=0, help_text=\"Number of sick chicks\")",
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "FeedMonitoring",
        "kind": 6,
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "peekOfCode": "class FeedMonitoring(models.Model):\n    batch = models.ForeignKey(ChickBatch, on_delete=models.CASCADE)\n    date = models.DateField()\n    feed_consumed = models.FloatField(default=0.0)\n    feed_forecast = models.FloatField(default=0.0)\n    feed_wastage = models.FloatField(default=0.0)\n    def __str__(self):\n        return f\"Feed Monitoring for Batch {self.batch.batch_date} on {self.date}\"\n    class Meta:\n        verbose_name = \"Feed Monitoring\"",
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "ChickSupply",
        "kind": 6,
        "importPath": "stakeholder.models",
        "description": "stakeholder.models",
        "peekOfCode": "class ChickSupply(models.Model):\n    batch = models.ForeignKey(ChickBatch, on_delete=models.CASCADE, related_name='chick_supplies')\n    stakeholder = models.ForeignKey(User, on_delete=models.CASCADE, related_name='chick_supplies')  # Link to stakeholder\n    date = models.DateField(default=timezone.now)\n    chicks_supplied = models.IntegerField(help_text=\"Number of chicks supplied on this day\")\n    chicken_type = models.CharField(max_length=20, choices=ChickBatch.TYPE_CHOICES)  # Type of chicken\n    def __str__(self):\n        return f\"Chicks Supplied for Batch {self.batch.batch_date} on {self.date}\"",
        "detail": "stakeholder.models",
        "documentation": {}
    },
    {
        "label": "send_whatsapp_message",
        "kind": 2,
        "importPath": "stakeholder.notifications",
        "description": "stakeholder.notifications",
        "peekOfCode": "def send_whatsapp_message(to, body):\n    # Initialize Twilio client\n    client = Client(settings.TWILIO_ACCOUNT_SID, settings.TWILIO_AUTH_TOKEN)\n    # Send a WhatsApp message\n    message = client.messages.create(\n        body=body,\n        from_=settings.TWILIO_WHATSAPP_FROM,\n        to=f'whatsapp:{to}'  # WhatsApp destination number\n    )\n    return message.sid",
        "detail": "stakeholder.notifications",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "stakeholder.urls",
        "description": "stakeholder.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n    path('services/', views.services, name='services'),\n    path('contact/', views.contact, name='contact'),\n    path('about/contact/', views.contact, name='about_contact'),\n    path('login/', CustomLoginView.as_view(), name='login'),\n    path('signup/', register, name='signup'),\n    path('stakeholder/', views.stakeholder, name='stakeholder'),\n    path('stateholder_batch/', views.stateholder_batch, name='stateholder_batch'),",
        "detail": "stakeholder.urls",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def home(request):\n    return render(request, 'index.html')\ndef about(request):\n    return render(request, 'about.html')\ndef services(request):\n    return render(request, 'services.html')\ndef contact(request):\n    return render(request, 'contact.html')\ndef logout_view(request):\n    logout(request)",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "about",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def about(request):\n    return render(request, 'about.html')\ndef services(request):\n    return render(request, 'services.html')\ndef contact(request):\n    return render(request, 'contact.html')\ndef logout_view(request):\n    logout(request)\n    return redirect('/')\n# views.py",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "services",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def services(request):\n    return render(request, 'services.html')\ndef contact(request):\n    return render(request, 'contact.html')\ndef logout_view(request):\n    logout(request)\n    return redirect('/')\n# views.py\n@login_required\ndef stakeholder(request):",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "contact",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def contact(request):\n    return render(request, 'contact.html')\ndef logout_view(request):\n    logout(request)\n    return redirect('/')\n# views.py\n@login_required\ndef stakeholder(request):\n    user = request.user  # Assuming the user is logged in\n    today = timezone.now().date()",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "logout_view",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def logout_view(request):\n    logout(request)\n    return redirect('/')\n# views.py\n@login_required\ndef stakeholder(request):\n    user = request.user  # Assuming the user is logged in\n    today = timezone.now().date()\n    # Fetch chick batches\n    chick_batches = user.chick_batches.all().order_by('-batch_date')",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "stakeholder",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def stakeholder(request):\n    user = request.user  # Assuming the user is logged in\n    today = timezone.now().date()\n    # Fetch chick batches\n    chick_batches = user.chick_batches.all().order_by('-batch_date')\n    total_chick_count = sum(\n        batch.initial_chick_count for batch in chick_batches)\n    # Fetch location from query parameters (not from the User model)\n    latitude = request.GET.get('lat')\n    longitude = request.GET.get('lon')",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "calculate_feeders_and_drinkers",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def calculate_feeders_and_drinkers(initial_chick_count):\n    feeders = initial_chick_count // 50  # 1 feeder for every 50 chicks\n    drinkers = initial_chick_count // 50  # 1 drinker for every 50 chicks\n    return feeders, drinkers\ndef stateholder_batch(request):\n    user = request.user  # Assuming the user is logged in\n    chick_batches = user.chick_batches.all().order_by('-batch_date')\n    # Prepare to store batch-wise feeders and drinkers\n    batch_info = []\n    for batch in chick_batches:",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "stateholder_batch",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def stateholder_batch(request):\n    user = request.user  # Assuming the user is logged in\n    chick_batches = user.chick_batches.all().order_by('-batch_date')\n    # Prepare to store batch-wise feeders and drinkers\n    batch_info = []\n    for batch in chick_batches:\n        initial_chick_count = batch.initial_chick_count\n        feeders, drinkers = calculate_feeders_and_drinkers(initial_chick_count)\n        batch_info.append({\n            'batch': batch,",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "update_chick_count",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def update_chick_count(request, id):\n    if request.method == 'POST':\n        try:\n            # Get the current logged-in user\n            user = User.objects.get(id=id)\n        except User.DoesNotExist:\n            messages.error(request, \"User not found.\")\n            return redirect(reverse('stakeholderuserprofile', args=[id]))\n        # Get chick count and other details from the form\n        initial_chick_count = request.POST.get('initial_chick_count')",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "feed_request",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def feed_request(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    return render(request, 'feed_request.html')\ndef vaccination(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    return render(request, 'vaccinations.html', {'user': user})\n@login_required  # Ensure only logged-in users can add daily data\ndef add_daily_data(request):\n    selected_batch = None\n    initial_alive_count = 0",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "vaccination",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def vaccination(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    return render(request, 'vaccinations.html', {'user': user})\n@login_required  # Ensure only logged-in users can add daily data\ndef add_daily_data(request):\n    selected_batch = None\n    initial_alive_count = 0\n    updated_alive_count = 0\n    updated_mortality_count = 0\n    # Filter batches based on the logged-in user",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "add_daily_data",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def add_daily_data(request):\n    selected_batch = None\n    initial_alive_count = 0\n    updated_alive_count = 0\n    updated_mortality_count = 0\n    # Filter batches based on the logged-in user\n    all_batches = ChickBatch.objects.filter(user=request.user)\n    # Initialize selected_batch_id from the session\n    selected_batch_id = request.session.get('selected_batch', None)\n    # Check if a batch was submitted and store it in the session",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "calculate_weeks",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def calculate_weeks(batch_date):\n    weeks = []\n    for i in range(6):  # Create 6 weeks\n        start_date = batch_date + timedelta(days=i * 7)\n        end_date = start_date + timedelta(days=6)\n        if i == 5:  # For the 6th week, adjust the end date to only go to day 40\n            end_date = batch_date + timedelta(days=39)  # 5 extra days\n        weeks.append((start_date, end_date))\n    return weeks\ndef list_daily_data(request, batch_id):",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "list_daily_data",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def list_daily_data(request, batch_id):\n    batch = get_object_or_404(ChickBatch, id=batch_id)\n    # Initialize the error message\n    error_message = None\n    # Get the selected filters from the GET request\n    selected_category = request.GET.get('category')\n    min_value = request.GET.get('min_value')\n    max_value = request.GET.get('max_value')\n    start_date = request.GET.get('start_date')\n    end_date = request.GET.get('end_date')",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "edit_daily_data",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def edit_daily_data(request, id):\n    # Fetch the specific record or return 404 if not found\n    daily_data = get_object_or_404(DailyData, id=id)\n    if request.method == 'POST':\n        # Bind data to the form to process user input\n        form = DailyDataForm(request.POST, instance=daily_data)\n        if form.is_valid():\n            form.save()  # Save changes\n            # Redirect back to the list page\n            return redirect('list_daily_data', batch_id=daily_data.batch.id)",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "delete_daily_data",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def delete_daily_data(request, daily_data_id):\n    daily_data_entry = get_object_or_404(DailyData, id=daily_data_id)\n    # Get the batch ID to redirect to the correct page\n    batch_id = daily_data_entry.batch_id  # Get the batch ID from the related batch\n    daily_data_entry.delete()\n    messages.success(request, 'Daily data entry deleted successfully.')\n    # Redirect to the list with the batch ID\n    return redirect('list_daily_data', batch_id=batch_id)\ndef daily_feed_summary(request):\n    current_batch = None",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "daily_feed_summary",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def daily_feed_summary(request):\n    current_batch = None\n    past_batch = None\n    compare_day = None\n    current_feed_uplifted = 0\n    current_weight_gain = 0\n    current_water_consumption = 0  # New metric\n    past_feed_uplifted = 0\n    past_weight_gain = 0\n    past_water_consumption = 0  # New metric",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "batch_feed_summary",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def batch_feed_summary(request):\n    if request.method == 'POST':\n        form = BatchSelectionForm(request.POST, user=request.user)\n        if form.is_valid():\n            selected_batch = form.cleaned_data['batch']\n            # Get daily data for the selected batch\n            daily_data = DailyData.objects.filter(\n                batch=selected_batch).order_by('-date')\n            # Prepare data for the chart and table\n            dates = [data.date.strftime('%Y-%m-%d')",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "feed_dashboard_view",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def feed_dashboard_view(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    # For debugging purposes, you can print the user object to see if it's retrieved correctly\n    print(f\"User: {user.email}, ID: {user.id}\")\n    return render(request, 'feed_dashboard.html', {'user': user})\ndef supplier_list(request):\n    \"\"\"Display the list of suppliers.\"\"\"\n    suppliers = Supplier.objects.all()  # Fetch all suppliers from the database\n    return render(request, 'supplier_list_stakeholder.html', {'suppliers': suppliers})",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "supplier_list",
        "kind": 2,
        "importPath": "stakeholder.views",
        "description": "stakeholder.views",
        "peekOfCode": "def supplier_list(request):\n    \"\"\"Display the list of suppliers.\"\"\"\n    suppliers = Supplier.objects.all()  # Fetch all suppliers from the database\n    return render(request, 'supplier_list_stakeholder.html', {'suppliers': suppliers})",
        "detail": "stakeholder.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0001_initial",
        "description": "user.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='UserType',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "user.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0002_alter_user_plan_file",
        "description": "user.migrations.0002_alter_user_plan_file",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('user', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='plan_file',\n            field=models.FileField(blank=True, null=True, upload_to='farm_plan/'),\n        ),",
        "detail": "user.migrations.0002_alter_user_plan_file",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0003_supplier",
        "description": "user.migrations.0003_supplier",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('user', '0002_alter_user_plan_file'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Supplier',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),",
        "detail": "user.migrations.0003_supplier",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0004_supplier_is_active",
        "description": "user.migrations.0004_supplier_is_active",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('user', '0003_supplier'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='supplier',\n            name='is_active',\n            field=models.BooleanField(default=True),\n        ),",
        "detail": "user.migrations.0004_supplier_is_active",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0005_supplier_supplier_code_supplier_unique_supplier_code",
        "description": "user.migrations.0005_supplier_supplier_code_supplier_unique_supplier_code",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('user', '0004_supplier_is_active'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='supplier',\n            name='supplier_code',\n            field=models.CharField(blank=True, max_length=50, null=True, unique=True),\n        ),",
        "detail": "user.migrations.0005_supplier_supplier_code_supplier_unique_supplier_code",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0006_remove_user_coopcapacity_remove_user_plan_file",
        "description": "user.migrations.0006_remove_user_coopcapacity_remove_user_plan_file",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('user', '0005_supplier_supplier_code_supplier_unique_supplier_code'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='user',\n            name='coopcapacity',\n        ),\n        migrations.RemoveField(",
        "detail": "user.migrations.0006_remove_user_coopcapacity_remove_user_plan_file",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0007_user_coopcapacity_user_plan_file",
        "description": "user.migrations.0007_user_coopcapacity_user_plan_file",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('user', '0006_remove_user_coopcapacity_remove_user_plan_file'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='coopcapacity',\n            field=models.IntegerField(blank=True, default=None, null=True),\n        ),",
        "detail": "user.migrations.0007_user_coopcapacity_user_plan_file",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0008_alter_user_is_active",
        "description": "user.migrations.0008_alter_user_is_active",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('user', '0007_user_coopcapacity_user_plan_file'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='is_active',\n            field=models.BooleanField(default=True),\n        ),",
        "detail": "user.migrations.0008_alter_user_is_active",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0009_user_location_user_name",
        "description": "user.migrations.0009_user_location_user_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('user', '0008_alter_user_is_active'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='location',\n            field=models.CharField(default='america', max_length=200),\n            preserve_default=False,",
        "detail": "user.migrations.0009_user_location_user_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0010_user_hotel_license",
        "description": "user.migrations.0010_user_hotel_license",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('user', '0009_user_location_user_name'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='hotel_license',\n            field=models.FileField(blank=True, null=True, upload_to='hotel_license/'),\n        ),",
        "detail": "user.migrations.0010_user_hotel_license",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0011_alter_user_hotel_license",
        "description": "user.migrations.0011_alter_user_hotel_license",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('user', '0010_user_hotel_license'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='hotel_license',\n            field=models.FileField(blank=True, null=True, upload_to='hotel_licenses/'),\n        ),",
        "detail": "user.migrations.0011_alter_user_hotel_license",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "user.admin",
        "description": "user.admin",
        "peekOfCode": "class UserAdmin(DefaultUserAdmin):\n    model = User\n    fieldsets = (\n        (None, {'fields': ('email', 'password')}),\n        (_('Personal info'), {\n         'fields': ('full_name', 'phone_number', 'user_type')}),\n        (_('Coop Information'), {\n         'fields': ('length', 'breadth', 'coopcapacity', 'expiry_date', 'pollution_certificate', 'farm_image','plan_file')}),\n        (_('Permissions'), {'fields': ('is_active', 'is_staff',\n         'is_superuser', 'groups', 'user_permissions')}),",
        "detail": "user.admin",
        "documentation": {}
    },
    {
        "label": "UserConfig",
        "kind": 6,
        "importPath": "user.apps",
        "description": "user.apps",
        "peekOfCode": "class UserConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'user'\ndef ready(self):\n        from .tasks import schedule_expiry_notification_task\n        schedule_expiry_notification_task()",
        "detail": "user.apps",
        "documentation": {}
    },
    {
        "label": "ready",
        "kind": 2,
        "importPath": "user.apps",
        "description": "user.apps",
        "peekOfCode": "def ready(self):\n        from .tasks import schedule_expiry_notification_task\n        schedule_expiry_notification_task()",
        "detail": "user.apps",
        "documentation": {}
    },
    {
        "label": "EmailBackend",
        "kind": 6,
        "importPath": "user.backends",
        "description": "user.backends",
        "peekOfCode": "class EmailBackend(ModelBackend):\n    def authenticate(self, request, username=None, password=None, **kwargs):\n        UserModel = get_user_model()\n        try:\n            user = UserModel.objects.get(email=username)\n        except UserModel.DoesNotExist:\n            return None\n        else:\n            if user.check_password(password):\n                return user",
        "detail": "user.backends",
        "documentation": {}
    },
    {
        "label": "CustomUserCreationForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class CustomUserCreationForm(UserCreationForm):\n    error_messages = {\n        'password_mismatch': 'The two password fields didn’t match.',\n    }\n    # user_type = forms.ModelChoiceField(queryset=UserType.objects.all())\n    user_type = forms.ModelChoiceField(\n        queryset=UserType.objects.all(),\n        required=False,\n        label=\"User Type\",\n        help_text=\"Select the type of user.\"",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "EmailAuthenticationForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class EmailAuthenticationForm(AuthenticationForm):\n    username = forms.EmailField(label=\"Email\", max_length=254)\n    def clean(self):\n        email = self.cleaned_data.get('username')\n        password = self.cleaned_data.get('password')\n        if email and password:\n            self.user_cache = authenticate(\n                self.request, email=email, password=password)\n            if self.user_cache is None:\n                raise self.get_invalid_login_error()",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "CustomSetPasswordForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class CustomSetPasswordForm(SetPasswordForm):\n    new_password1 = forms.CharField(\n        label=\"New Password\",\n        widget=forms.PasswordInput,\n        help_text=\"Your new password must be at least 8 characters long.\"\n    )\n    new_password2 = forms.CharField(\n        label=\"Confirm New Password\",\n        widget=forms.PasswordInput,\n        help_text=\"Enter the same password as above, for verification.\"",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "StakeholderUserForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class StakeholderUserForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields = ['email', 'full_name', 'phone_number', 'farm_image', 'length',\n                  'breadth', 'expiry_date', 'pollution_certificate', 'coopcapacity', 'address', 'plan_file']\n        widgets = {\n            'expiry_date': forms.DateInput(attrs={'type': 'date'}),\n        }\n    from .models import User\nclass CustomUserCreationForm(UserCreationForm):",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "CustomUserCreationForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class CustomUserCreationForm(UserCreationForm):\n    error_messages = {\n        'password_mismatch': 'The two password fields didn’t match.',\n    }\n    # user_type = forms.ModelChoiceField(queryset=UserType.objects.all())\n    user_type = forms.ModelChoiceField(\n        queryset=UserType.objects.all(),\n        required=False,\n        label=\"User Type\",\n        help_text=\"Select the type of user.\"",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "EmailAuthenticationForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class EmailAuthenticationForm(AuthenticationForm):\n    username = forms.EmailField(label=\"Email\", max_length=254)\n    def clean(self):\n        email = self.cleaned_data.get('username')\n        password = self.cleaned_data.get('password')\n        if email and password:\n            self.user_cache = authenticate(\n                self.request, email=email, password=password)\n            if self.user_cache is None:\n                raise self.get_invalid_login_error()",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "CustomSetPasswordForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class CustomSetPasswordForm(SetPasswordForm):\n    new_password1 = forms.CharField(\n        label=\"New Password\",\n        widget=forms.PasswordInput,\n        help_text=\"Your new password must be at least 8 characters long.\"\n    )\n    new_password2 = forms.CharField(\n        label=\"Confirm New Password\",\n        widget=forms.PasswordInput,\n        help_text=\"Enter the same password as above, for verification.\"",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "StakeholderUserForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class StakeholderUserForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields = ['email', 'full_name', 'phone_number', 'name', 'farm_image', 'length',\n                  'breadth', 'expiry_date', 'pollution_certificate', 'address', 'location', 'plan_file']\n        widgets = {\n            'expiry_date': forms.DateInput(attrs={'type': 'date'}),\n        }\n    def clean(self):\n        cleaned_data = super().clean()",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "SupplierForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class SupplierForm(forms.ModelForm):\n    class Meta:\n        model = Supplier\n        fields = ['supplier_code', 'name', 'email', 'phone_number',\n                  'address', 'is_active']  # Include is_active field\n    def clean_email(self):\n        email = self.cleaned_data.get('email')\n        if Supplier.objects.filter(email=email).exists():\n            raise forms.ValidationError(\n                \"This email is already in use. Please choose a different one.\")",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "SupplierForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class SupplierForm(forms.ModelForm):\n    class Meta:\n        model = Supplier\n        fields = ['supplier_code', 'name', 'email', 'phone_number',\n                  'address', 'is_active']  # Include is_active field\n    def clean_email(self):\n        email = self.cleaned_data.get('email')\n        if Supplier.objects.filter(email=email).exists():\n            raise forms.ValidationError(\n                \"This email is already in use. Please choose a different one.\")",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "clean_plan_file",
        "kind": 2,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "def clean_plan_file(self):\n    file = self.cleaned_data.get('plan_file')\n    if file:\n        # Validate file type\n        if not (file.name.endswith('.pdf') or file.name.endswith('.jpg') or file.name.endswith('.jpeg') or file.name.endswith('.png')):\n            raise ValidationError(\n                \"Only PDF, JPG, JPEG, and PNG files are allowed.\")\n        # Validate file size (e.g., max 5 MB)\n        if file.size > 5 * 1024 * 1024:  # 5 MB limit\n            raise ValidationError(\"File size must be under 5 MB.\")",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "CustomUserManager",
        "kind": 6,
        "importPath": "user.models",
        "description": "user.models",
        "peekOfCode": "class CustomUserManager(BaseUserManager):\n    def create_user(self, email, full_name, password=None, **extra_fields):\n        if not email:\n            raise ValueError('The Email field must be set')\n        email = self.normalize_email(email)\n        user = self.model(email=email, full_name=full_name, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n    def create_superuser(self, email, full_name, password=None, **extra_fields):",
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "UserType",
        "kind": 6,
        "importPath": "user.models",
        "description": "user.models",
        "peekOfCode": "class UserType(models.Model):\n    name = models.CharField(max_length=50, unique=True)\n    description = models.TextField(blank=True, null=True)\n    def __str__(self):\n        return self.name\nclass User(AbstractUser):\n    username = None  # Remove the username field\n    email = models.EmailField(unique=True)\n    user_type = models.ForeignKey(\n        UserType, on_delete=models.SET_NULL, null=True, blank=True)",
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "user.models",
        "description": "user.models",
        "peekOfCode": "class User(AbstractUser):\n    username = None  # Remove the username field\n    email = models.EmailField(unique=True)\n    user_type = models.ForeignKey(\n        UserType, on_delete=models.SET_NULL, null=True, blank=True)\n    full_name = models.CharField(max_length=255)\n    phone_number = models.CharField(max_length=15, blank=True, null=True)\n    # ImageField for image uploads\n    farm_image = models.ImageField(upload_to='images/', null=True, blank=True)\n    length = models.FloatField(default=None, blank=True, null=True)",
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "Supplier",
        "kind": 6,
        "importPath": "user.models",
        "description": "user.models",
        "peekOfCode": "class Supplier(models.Model):\n    supplier_code = models.CharField(\n        max_length=50, unique=True, blank=True, null=True)  # Unique supplier code\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    phone_number = models.CharField(max_length=15)\n    address = models.CharField(max_length=255, blank=True, null=True)\n    # New field to track active status\n    is_active = models.BooleanField(default=True)\n    class Meta:",
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "user.signals",
        "description": "user.signals",
        "peekOfCode": "class User(AbstractUser):\n    # Your existing fields...\n    def check_certificate_status(self):\n        \"\"\"Check if the pollution certificate is still valid.\"\"\"\n        if self.expiry_date and self.expiry_date < timezone.now().date():\n            # Expiry date has passed, make the user inactive\n            self.is_active = False\n        else:\n            # Expiry date is valid, make the user active\n            self.is_active = True",
        "detail": "user.signals",
        "documentation": {}
    },
    {
        "label": "deactivate_expired_users",
        "kind": 2,
        "importPath": "user.tasks",
        "description": "user.tasks",
        "peekOfCode": "def deactivate_expired_users():\n    today = timezone.now().date()\n    users_to_deactivate = User.objects.filter(expiry_date__lt=today, is_active=True)\n    for user in users_to_deactivate:\n        user.is_active = False\n        user.save()\n        print(f\"Deactivated user: {user.email}\")\n    return f\"{len(users_to_deactivate)} users deactivated.\"\n@shared_task\ndef send_expiry_alerts():",
        "detail": "user.tasks",
        "documentation": {}
    },
    {
        "label": "send_expiry_alerts",
        "kind": 2,
        "importPath": "user.tasks",
        "description": "user.tasks",
        "peekOfCode": "def send_expiry_alerts():\n    logger.info(\"Sending expiry alerts...\")\n    today = date.today()\n    tomorrow = today + timedelta(days=1)\n    # Retrieve users whose certificates are expiring today and tomorrow\n    users_expiring_today = User.objects.filter(expiry_date=today)\n    users_expiring_tomorrow = User.objects.filter(expiry_date=tomorrow)\n    # Loop through users expiring today\n    for user in users_expiring_today:\n        if user.email:",
        "detail": "user.tasks",
        "documentation": {}
    },
    {
        "label": "schedule_expiry_alerts",
        "kind": 2,
        "importPath": "user.tasks",
        "description": "user.tasks",
        "peekOfCode": "def schedule_expiry_alerts():\n    # Create or get the Crontab schedule (runs daily at 11:43 AM)\n    task_name = 'Send Pollution Certificate Expiry Alerts'\n    # Get or create the periodic task\n    task, created = PeriodicTask.objects.get_or_create(\n        crontab=schedule,\n        name=task_name,\n        task='user.tasks.send_expiry_alerts',\n        defaults={\n            'kwargs': json.dumps({})  # Pass any arguments if needed",
        "detail": "user.tasks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "user.tasks",
        "description": "user.tasks",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@shared_task\ndef deactivate_expired_users():\n    today = timezone.now().date()\n    users_to_deactivate = User.objects.filter(expiry_date__lt=today, is_active=True)\n    for user in users_to_deactivate:\n        user.is_active = False\n        user.save()\n        print(f\"Deactivated user: {user.email}\")\n    return f\"{len(users_to_deactivate)} users deactivated.\"",
        "detail": "user.tasks",
        "documentation": {}
    },
    {
        "label": "CustomLoginView",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class CustomLoginView(LoginView):\n    authentication_form = EmailAuthenticationForm\n    template_name = 'login.html'  # Specify your template\n    redirect_authenticated_user = True  # Redirect if user is already logged in\n    # Where to redirect after successful login\n    success_url = reverse_lazy('home')\n    def get_success_url(self):  # checking for which type of user after login\n        user = self.request.user\n        if user.user_type != None and hasattr(user, 'user_type') and user.user_type.name.lower() == 'stakeholder':\n            return reverse_lazy('stakeholder')",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def register(request):\n    user_type_param = request.GET.get('user_type')\n    print(user_type_param)\n    if request.method == 'POST':\n        form = CustomUserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save(commit=False)\n            print(user)\n            # Get the selected user type\n            user_type = UserType.objects.get(name=user_type_param)",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "admindash",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def admindash(request):\n    completed_orders_count = 0\n    completed_batches_sales_count = 0\n    # Fetching the usertype with name 'Stakeholder'\n    stakeholder_user_type = UserType.objects.get(name='Stakeholder')\n    # Counting total stakeholders\n    total_stakeholders = User.objects.filter(\n        user_type=stakeholder_user_type).count()\n    # Counting active stakeholders\n    active_stakeholders = User.objects.filter(",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "stakeholderuser",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def stakeholderuser(request):\n    # fetching the usertype with name stakeholder\n    user_type = UserType.objects.get(name='Stakeholder')\n    users = User.objects.filter(user_type=user_type)\n    context = {'users': users}\n    return render(request, 'stakeholderuser.html', context)\ndef stakeholderuserprofile(request, id):\n    user = User.objects.get(id=id)\n    chick_batches = ChickBatch.objects.filter(user=user)\n    total_chick_count = chick_batches.aggregate(Sum('initial_chick_count'))[",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "stakeholderuserprofile",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def stakeholderuserprofile(request, id):\n    user = User.objects.get(id=id)\n    chick_batches = ChickBatch.objects.filter(user=user)\n    total_chick_count = chick_batches.aggregate(Sum('initial_chick_count'))[\n        'initial_chick_count__sum'] or 0\n    today = date.today()\n    day_expiry = None\n    if user.expiry_date:\n        day_expiry = (user.expiry_date - today).days\n    # Calculate square feet based on length and breadth (assuming they're in the User model)",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "view_stakeholder_view",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def view_stakeholder_view(request, id):\n    chick_batches = ChickBatch.objects.filter(\n        user_id=id)  # Adjust the queryset as needed\n    return render(request, 'chick_batches_list.html', {'chick_batches': chick_batches,\"user\":id})\ndef download_daily_log(request, batch_id):\n    try:\n        # Retrieve the DailyData records for the specific batch\n        batch = ChickBatch.objects.get(id=batch_id)\n        daily_data_records = DailyData.objects.filter(batch=batch)\n        # Create a DataFrame for the daily log",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "download_daily_log",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def download_daily_log(request, batch_id):\n    try:\n        # Retrieve the DailyData records for the specific batch\n        batch = ChickBatch.objects.get(id=batch_id)\n        daily_data_records = DailyData.objects.filter(batch=batch)\n        # Create a DataFrame for the daily log\n        data = {\n            'Date': [record.date for record in daily_data_records],\n            'Alive Count': [record.alive_count for record in daily_data_records],\n            'Sick Chicks': [record.sick_chicks for record in daily_data_records],",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "customeruser",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def customeruser(request):\n    # fetching the usertype with customer\n    user_type = UserType.objects.get(name='Customer')\n    # fetching all user that having user type as customer\n    users = User.objects.filter(user_type=user_type)\n    # context is using in html for rendering the data eg: user.name,user.email etc\n    context = {'users': users}\n    return render(request, 'customeruser.html', context)\ndef customeruserprofile(request, id):\n    user = User.objects.get(id=id)",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "customeruserprofile",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def customeruserprofile(request, id):\n    user = User.objects.get(id=id)\n    orders = Order.objects.filter(user=id)\n    return render(request, 'customerprofile.html', {'user': user, 'orders': orders})\n@login_required\ndef approve_order(request, order_id):\n    # Fetch the order and update its status\n    order = get_object_or_404(Order, id=order_id)\n    if request.method == 'POST':\n        # Check if the order can be fulfilled",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "approve_order",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def approve_order(request, order_id):\n    # Fetch the order and update its status\n    order = get_object_or_404(Order, id=order_id)\n    if request.method == 'POST':\n        # Check if the order can be fulfilled\n        if not order.can_fulfill_order():\n            messages.error(\n                request, \"Not enough chickens available to fulfill this order.\")\n            return redirect('customeruserprofile', id=order.user.id)\n        # Confirm the order",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "stakeholder_registration",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def stakeholder_registration(request, id):\n    user = get_object_or_404(User, id=id)\n    if request.method == 'POST':\n        user_form = StakeholderUserForm(\n            request.POST, request.FILES, instance=user)\n        if user_form.is_valid():\n            user_form.save()  # Save the updated user profile\n            # Re\n            # direct to a success page or wherever you need\n            return redirect('stakeholder')",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "toggle_user_status",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def toggle_user_status(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    if request.method == \"POST\":\n        # Toggle the user's active status\n        user.is_active = not user.is_active\n        user.save()\n        status = \"enabled\" if user.is_active else \"disabled\"\n        messages.success(request, f\"User has been {status} successfully.\")\n        if user.user_type.name.lower() == \"customer\":\n            return redirect('customeruser')",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "vaccine_admin",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def vaccine_admin(request):\n    # Assuming you're trying to retrieve a VaccineAdmin object by its ID (pk)\n    return render(request, 'vaccination.html')\ndef feed_admin(request):\n    return render(request, 'feedadmin.html')\n# user/views.py\ndef renew_pollution_certificate(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    if request.method == 'POST':\n        new_expiry_date = request.POST.get('expiry_date')",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "feed_admin",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def feed_admin(request):\n    return render(request, 'feedadmin.html')\n# user/views.py\ndef renew_pollution_certificate(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    if request.method == 'POST':\n        new_expiry_date = request.POST.get('expiry_date')\n        if new_expiry_date:\n            user.expiry_date = new_expiry_date  # Update the expiry date\n            user.is_active = True  # Reactivate the user",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "renew_pollution_certificate",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def renew_pollution_certificate(request, user_id):\n    user = get_object_or_404(User, id=user_id)\n    if request.method == 'POST':\n        new_expiry_date = request.POST.get('expiry_date')\n        if new_expiry_date:\n            user.expiry_date = new_expiry_date  # Update the expiry date\n            user.is_active = True  # Reactivate the user\n            user.save()\n            messages.success(\n                request, \"Pollution certificate renewed successfully.\")",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "supplier_list",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def supplier_list(request):\n    \"\"\"Display the list of suppliers.\"\"\"\n    suppliers = Supplier.objects.all()\n    return render(request, 'supplier_list.html', {'suppliers': suppliers})\ndef add_supplier(request):\n    \"\"\"Add a new supplier.\"\"\"\n    if request.method == 'POST':\n        form = SupplierForm(request.POST)\n        if form.is_valid():\n            form.save()",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "add_supplier",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def add_supplier(request):\n    \"\"\"Add a new supplier.\"\"\"\n    if request.method == 'POST':\n        form = SupplierForm(request.POST)\n        if form.is_valid():\n            form.save()\n            # Success message\n            messages.success(request, 'Supplier added successfully.')\n            # Redirect to supplier list after adding\n            return redirect('supplier_list')",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "edit_supplier",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def edit_supplier(request, supplier_id):\n    \"\"\"Edit an existing supplier.\"\"\"\n    supplier = get_object_or_404(Supplier, id=supplier_id)\n    if request.method == 'POST':\n        form = SupplierForm(request.POST, instance=supplier)\n        if form.is_valid():\n            form.save()\n            # Redirect to supplier list after editing\n            return redirect('supplier_list')\n    else:",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "enable_supplier",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def enable_supplier(request, supplier_id):\n    \"\"\"Enable a supplier.\"\"\"\n    supplier = get_object_or_404(Supplier, id=supplier_id)\n    supplier.is_active = True\n    supplier.save()\n    # Redirect to supplier list after enabling\n    return redirect('supplier_list')\ndef disable_supplier(request, supplier_id):\n    \"\"\"Disable a supplier.\"\"\"\n    supplier = get_object_or_404(Supplier, id=supplier_id)",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "disable_supplier",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def disable_supplier(request, supplier_id):\n    \"\"\"Disable a supplier.\"\"\"\n    supplier = get_object_or_404(Supplier, id=supplier_id)\n    supplier.is_active = False\n    supplier.save()\n    # Redirect to supplier list after disabling\n    return redirect('supplier_list')",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'FeatherFarmSoloutions.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]